<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>牛小聪</title>
  
  
  <link href="https://niuxiaocong.github.io/atom.xml" rel="self"/>
  
  <link href="https://niuxiaocong.github.io/"/>
  <updated>2021-09-13T12:44:02.337Z</updated>
  <id>https://niuxiaocong.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sentinel</title>
    <link href="https://niuxiaocong.github.io/2021/09/13/Sentinel/"/>
    <id>https://niuxiaocong.github.io/2021/09/13/Sentinel/</id>
    <published>2021-09-13T08:21:31.000Z</published>
    <updated>2021-09-13T12:44:02.337Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Sentinel-简介"><a href="#Sentinel-简介" class="headerlink" title="Sentinel 简介"></a>Sentinel 简介</h2><p>Sentinel  GitHub 官网地址：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p>压力测试工具的使用教程：<a href="https://www.cnblogs.com/monjeo/p/9330464.html">https://www.cnblogs.com/monjeo/p/9330464.html</a></p><p>Sentinel 是什么？</p><p>简单来说他是阿里版的Hystrix，它也可以实现服务降级、服务熔断、限流等等，单独的一个组件，可以独立出来，界面化的细粒度的统一 配置</p><h2 id="Sentinel-安装下载（1-7-0）"><a href="#Sentinel-安装下载（1-7-0）" class="headerlink" title="Sentinel 安装下载（1.7.0）"></a>Sentinel 安装下载（1.7.0）</h2><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><img src="/2021/09/13/Sentinel/image-20210913164334574.png" alt="image-20210913164334574"></p><p>下载完成以后就是一个Jar包</p><p><img src="/2021/09/13/Sentinel/image-20210913164434724.png" alt="image-20210913164434724"></p><p>Sentinel分成两个部分</p><p>核心库：（Java客户端），不依赖任何框架，能够运行所有的java运行环境，同时对Dubbo / SpringCloud 等框架也有较好的支持</p><p>控制台（Dashboard）基于SpringBoot开发，打包以后可以直接运行，不需要额外的Tomcat等应用容器</p><p>使用java -jar命令运行这个jar包即可</p><pre class=" language-bash"><code class="language-bash">java -jar sentinel的jar包名</code></pre><p>运行8080可以看到以下的界面</p><p><img src="/2021/09/13/Sentinel/image-20210913164942510.png" alt="image-20210913164942510"></p><p>用户名 和 密码都是sentinel登录以后剋以看到如下页面</p><p><img src="/2021/09/13/Sentinel/image-20210913165103039.png" alt="image-20210913165103039"></p><h2 id="Sentinel初始化监控"><a href="#Sentinel初始化监控" class="headerlink" title="Sentinel初始化监控"></a>Sentinel初始化监控</h2><p>新建模块 cloudalibaba-sentinel-service8401</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-alibaba-sentinel --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--OpenFeign--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#配置 Sentinel dashboard地址</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token comment" spellcheck="true">#默认8719端口，假如这个端口被占用会自动从8719开始进行依次加1，一直找到未被占用的端口</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span><span class="token key atrule">managent</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span></code></pre><p>主启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp8401</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MainApp8401<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>业务类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLimitController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"----------TestA"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"---------TestB"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动测试</p><p>因为sentinel使用的是懒加载机制，配置完成以后需要对他进行依次请求访问，才能够被监控的到</p><p>请求地址：<a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p><p><img src="/2021/09/13/Sentinel/image-20210913171419178.png" alt="image-20210913171419178"></p><h2 id="Sentinel-流控规则简介"><a href="#Sentinel-流控规则简介" class="headerlink" title="Sentinel - 流控规则简介"></a>Sentinel - 流控规则简介</h2><p><img src="/2021/09/13/Sentinel/image-20210913171938304.png" alt="image-20210913171938304"></p><h3 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h3><h4 id="流控-QPS直接失败"><a href="#流控-QPS直接失败" class="headerlink" title="流控  - QPS直接失败"></a>流控  - QPS直接失败</h4><p>设置每秒钟请求的数量，如果超过这个数量则直接失败</p><p><img src="/2021/09/13/Sentinel/image-20210913172300854.png" alt="image-20210913172300854"></p><p>超流 就直接失败</p><p><img src="/2021/09/13/Sentinel/image-20210913172404619.png" alt="image-20210913172404619"></p><h4 id="流控-线程数直接失败"><a href="#流控-线程数直接失败" class="headerlink" title="流控 - 线程数直接失败"></a>流控 - 线程数直接失败</h4><p>超过指定线程数之后直接失败</p><p><img src="/2021/09/13/Sentinel/image-20210913183450094.png" alt="image-20210913183450094"></p><p>在这要借助一下测试工具模拟一个线程，启动</p><p><img src="/2021/09/13/Sentinel/image-20210913185513406.png" alt="image-20210913185513406"></p><p><img src="/2021/09/13/Sentinel/image-20210913185606371.png" alt="image-20210913185606371"></p><p>看看模拟线程的结果，如果在规定时间内超过了指定的线程数，就会被限流</p><p><img src="/2021/09/13/Sentinel/image-20210913185653050.png" alt="image-20210913185653050"></p><h4 id="流控-关联"><a href="#流控-关联" class="headerlink" title="流控 - 关联"></a>流控 - 关联</h4><p>关联式什么：简单来说就是牵连，打个比方，服务A关联服务B，当被关联的服务B达到阈值之后，服务A就会对自己进行限流</p><p><img src="/2021/09/13/Sentinel/image-20210913190208899.png" alt="image-20210913190208899"></p><p><img src="/2021/09/13/Sentinel/image-20210913190437286.png" alt="image-20210913190437286"></p><p><img src="/2021/09/13/Sentinel/image-20210913190404824.png" alt="image-20210913190404824"></p><p>密集的访问/TestB，会发现TestA挂了</p><p><img src="/2021/09/13/Sentinel/image-20210913190528330.png" alt="image-20210913190528330"></p><h4 id="流控-链路"><a href="#流控-链路" class="headerlink" title="流控 - 链路"></a>流控 - 链路</h4><p>多个请求调用了同一个微服务</p><h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><h3 id="流控效果-快速失败"><a href="#流控效果-快速失败" class="headerlink" title="流控效果 - 快速失败"></a>流控效果 - 快速失败</h3><h3 id="流控效果-预热"><a href="#流控效果-预热" class="headerlink" title="流控效果 - 预热"></a>流控效果 - 预热</h3><pre><code>公式：阈值除以coldFactor（默认值是3），经过预热时长以后才会达到域值</code></pre><p>如下配置：</p><p>这个配置的意思式冷加载因子是默认是3  10 / 3 大约是3个左右，意思就是1秒钟通过3个请求，5秒钟以后，过度到每秒钟10个请求</p><p><img src="/2021/09/13/Sentinel/image-20210913193046521.png" alt="image-20210913193046521"></p><p><img src="/2021/09/13/Sentinel/image-20210913193021888.png" alt="image-20210913193021888"></p><p>应用场景</p><p>​    秒杀系统在开启的瞬间，会有大量的流量上来，很有可能将系统打死，预热方式就是为了保护系统，可以慢慢的把流量放进来，慢慢的把阈值增长到我们设置的阈值</p><h3 id="流控效果-排队等待"><a href="#流控效果-排队等待" class="headerlink" title="流控效果 - 排队等待"></a>流控效果 - 排队等待</h3><p>就是每秒处理指定的请求，多出来的请求排队等待</p><p><img src="/2021/09/13/Sentinel/image-20210913194308768.png" alt="image-20210913194308768"></p><p><img src="/2021/09/13/Sentinel/image-20210913194249049.png" alt="image-20210913194249049"></p><h2 id="Sentinel-降级简介"><a href="#Sentinel-降级简介" class="headerlink" title="Sentinel - 降级简介"></a>Sentinel - 降级简介</h2><p>基本介绍</p><pre><code>RT（平均响应时间，秒级）    平均响应时间 超出阈值 且在时间  窗口内通过请求 &gt;=5 两个条件同时满足以后触发降级，窗口期过后关闭断路器    RT最大4900（更大的需要通过 -Dcsp.sentinel.statistic.max.rt=XXXX 才能生效）异常比例    QPS &gt;=5 异常比例（秒级统计）超过阈值时候，触发降级，时间窗口结束以后，关闭降级异常数    异常数（分钟统计）超过阈值时候，触发降级，时间窗口结束，关闭降级        Sentinel熔断降级会在调用链路中某个资源出现不稳定状态时候（例如 ：调用超时或异常比例升高），对这个资源的调用进行 限制，让请求快速失败，避免影响到其他的资源而导致级联错误当资源被降级时候，在接下来的降级时间窗口之内，对该资源的调用都自动熔断，默认行为提出DegradeExceptio</code></pre><h3 id="sentinel降级-RT"><a href="#sentinel降级-RT" class="headerlink" title="sentinel降级 - RT"></a>sentinel降级 - RT</h3><p>是什么？</p><pre><code>慢调用比例 (SLOW_REQUEST_RATIO)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</code></pre><p>在controller中添加</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testD"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testD 测试RT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"-----------TestD"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>配置降级规则RT</p><p>秒级响应时间</p><p><img src="/2021/09/13/Sentinel/image-20210913201000362.png" alt="image-20210913201000362"></p><p>压力测试</p><p><img src="/2021/09/13/Sentinel/image-20210913201506659.png" alt="image-20210913201506659"></p><p>​    这个配置的意思是，永远1秒钟打10个线程进来（大于5个了），调用TestD,期望200毫秒处理完本次的任务，如果超过200毫秒没有处理完毕，则在未来1秒中的时间窗口内，断路器打开保险丝跳闸微服务则不可用。之后关闭压力测试以后，访问量减少以后，重新恢复访问</p><p>运行测试发现挂掉了</p><p><img src="/2021/09/13/Sentinel/image-20210913201933949.png" alt="image-20210913201933949"></p><p>关闭压力测试工具，重新恢复访问</p><p><img src="/2021/09/13/Sentinel/image-20210913202024781.png" alt="image-20210913202024781"></p><h3 id="sentinel降级-异常比例"><a href="#sentinel降级-异常比例" class="headerlink" title="sentinel降级 - 异常比例"></a>sentinel降级 - 异常比例</h3><p>是什么？</p><p><img src="/2021/09/13/Sentinel/image-20210913202204188.png" alt="image-20210913202204188"></p><pre><code>异常比例 (ERROR_RATIO)：当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</code></pre><p>配置异常比例</p><p>这个配置的意思是，异常的比例不能超过20%，要保证80%都是正确的，如果异常数超过20%，在规定的时间内不可访问</p><p><img src="/2021/09/13/Sentinel/image-20210913202645621.png" alt="image-20210913202645621"></p><p>运行测试</p><p><img src="/2021/09/13/Sentinel/image-20210913202825937.png" alt="image-20210913202825937"></p><h3 id="sentinel降级-异常数"><a href="#sentinel降级-异常数" class="headerlink" title="sentinel降级 - 异常数"></a>sentinel降级 - 异常数</h3><pre><code>异常数：当资源接近1分钟的异常数目超过阈值之后可能会进行熔断，注意由于统计时间窗口是分钟级别的，如果timeWindow 小于60s，则结束熔断状态后仍然可能再一次进入熔断状态。时间窗口一定要大于60秒异常数 (ERROR_COUNT)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</code></pre><p><img src="/2021/09/13/Sentinel/image-20210913203240646.png" alt="image-20210913203240646"></p><p><img src="/2021/09/13/Sentinel/image-20210913203445224.png" alt="image-20210913203445224"></p><p>controller中添加如下测试内容</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testF"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testF 测试异常数******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"-----------TestF"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>配置异常数</p><p>这个的意思是，当错误次数达到5次以后，直接进入熔断降级61秒</p><p><img src="/2021/09/13/Sentinel/image-20210913203907794.png" alt="image-20210913203907794"></p><p>运行测试</p><p><img src="/2021/09/13/Sentinel/image-20210913204018321.png" alt="image-20210913204018321"></p><h2 id="Sentinel-热点Key"><a href="#Sentinel-热点Key" class="headerlink" title="Sentinel - 热点Key"></a>Sentinel - 热点Key</h2><p>热点key只支持QPS</p><p><img src="/2021/09/13/Sentinel/image-20210913204319254.png" alt="image-20210913204319254"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Sentinel" scheme="https://niuxiaocong.github.io/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://niuxiaocong.github.io/2021/09/13/RabbitMQ/"/>
    <id>https://niuxiaocong.github.io/2021/09/13/RabbitMQ/</id>
    <published>2021-09-13T04:25:02.000Z</published>
    <updated>2021-09-13T04:25:02.605Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nacos</title>
    <link href="https://niuxiaocong.github.io/2021/09/12/nacos/"/>
    <id>https://niuxiaocong.github.io/2021/09/12/nacos/</id>
    <published>2021-09-12T12:24:46.000Z</published>
    <updated>2021-09-13T02:20:05.705Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h2><p>Nacos是什么？</p><p>一句话总结：Nacos 可以做服务注册于发现，可以做配置中心，还可以作为总线</p><p>Nacos能干吗？</p><p>可以替代Eureka做服务注册中心</p><p>可以替代Config做服务配置中心</p><p>从哪里下载？</p><pre><code> Nacos下载地址：https://github.com/alibaba/nacos/releases/tag/1.1.4</code></pre><p>​     Nacos中文文档：<a href="https://nacos.io/zh-cn/">https://nacos.io/zh-cn/</a></p><h2 id="Spring-Alibaba-Spring-Cloud-Spring-Boot之间的版本选择"><a href="#Spring-Alibaba-Spring-Cloud-Spring-Boot之间的版本选择" class="headerlink" title="Spring Alibaba Spring Cloud Spring Boot之间的版本选择"></a>Spring Alibaba Spring Cloud Spring Boot之间的版本选择</h2><p>参考官网地址：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E</a></p><p><img src="/2021/09/12/nacos/image-20210913080337440.png" alt="image-20210913080337440"></p><h2 id="Nacos安装下载"><a href="#Nacos安装下载" class="headerlink" title="Nacos安装下载"></a>Nacos安装下载</h2><p>进入官网以后选择相应的版本进行下载</p><p><img src="/2021/09/12/nacos/image-20210912203528825.png" alt="image-20210912203528825"></p><p>下载完成以后会有以下几个目录</p><p><img src="/2021/09/12/nacos/image-20210912203640974.png" alt="image-20210912203640974"></p><p>启动在bin目录</p><p><img src="/2021/09/12/nacos/image-20210912203704500.png" alt="image-20210912203704500"></p><p>点击startup.cmd进行启动</p><p>默认的端口式8848，默认的账号密码式nacos</p><p><img src="/2021/09/12/nacos/image-20210912203801196.png" alt="image-20210912203801196"></p><p>登录地址：<a href="http://localhost:8848/nacos/#/login">http://localhost:8848/nacos/#/login</a></p><p><img src="/2021/09/12/nacos/image-20210912203909773.png" alt="image-20210912203909773"></p><p><img src="/2021/09/12/nacos/image-20210912203930572.png" alt="image-20210912203930572"></p><h2 id="创建cloudalibaba-provider-payment9001模块"><a href="#创建cloudalibaba-provider-payment9001模块" class="headerlink" title="创建cloudalibaba-provider-payment9001模块"></a>创建cloudalibaba-provider-payment9001模块</h2><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--服务发现--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span></code></pre><p>主启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain9001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PaymentMain9001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"nacos register,ServerPort："</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">"\t id:"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动测试</p><p>测试地址：<a href="http://localhost:9001/payment/nacos/1">http://localhost:9001/payment/nacos/1</a></p><p><img src="/2021/09/12/nacos/image-20210912211614553.png" alt="image-20210912211614553"></p><p>查看服务列表</p><p><img src="/2021/09/12/nacos/image-20210912211657110.png" alt="image-20210912211657110"></p><h2 id="创建cloudalibaba-provider-payment9002模块"><a href="#创建cloudalibaba-provider-payment9002模块" class="headerlink" title="创建cloudalibaba-provider-payment9002模块"></a>创建cloudalibaba-provider-payment9002模块</h2><p>创建过程同上，略</p><h2 id="Nacos-自带负载均衡"><a href="#Nacos-自带负载均衡" class="headerlink" title="Nacos 自带负载均衡"></a>Nacos 自带负载均衡</h2><p>创建消费者模块cloudalibaba-consumer-nacos-order83</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">         <span class="token comment" spellcheck="true">&lt;!--配置中心--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--服务发现--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">83</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>order<span class="token punctuation">-</span>consume  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span><span class="token comment" spellcheck="true">#消费者将要去访问的微服务名称</span><span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider</code></pre><p>主启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosPaymentConsumerMain83</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosPaymentConsumerMain83<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${service-url.nacos-user-service}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverURL<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serverURL<span class="token operator">+</span><span class="token string">"/payment/nacos/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动运行测试</p><p>访问地址：<a href="http://localhost:83/consumer/payment/nacos/1">http://localhost:83/consumer/payment/nacos/1</a></p><p>实现轮询算法</p><p><img src="/2021/09/12/nacos/image-20210913073807665.png" alt="image-20210913073807665"></p><p><img src="/2021/09/12/nacos/image-20210913073816295.png" alt="image-20210913073816295"></p><h2 id="nacos是支持AP和CP的切换的"><a href="#nacos是支持AP和CP的切换的" class="headerlink" title="nacos是支持AP和CP的切换的"></a>nacos是支持AP和CP的切换的</h2><pre><code>Nacos支持AP和CP之间的切换C：是所有几点在同一个时间看到的数据是一致的A：而A的定义是所有的请求都会收到相应AP和CP模式应该如何选择？    如果不需要存储服务级别的信息且服务实例是通过nocas-client注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如Spring cloud 和 Dubbo服务都适用于AP模式，AP模式为了服务的可能性而减弱了一致性，索引AP模式模式下只支持注册临时实例        如果需要在服务级别编辑或者存储配置信息，那么CP是必须的 K8s和DNS服务都适用于CP模式，CP模式下则支持注册持久化实例，此时则是以Raft协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不在，就会返回错误            切换为CP：curl -X PUT &#39;$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP&#39;</code></pre><h2 id="Nacos作为服务配置中心"><a href="#Nacos作为服务配置中心" class="headerlink" title="Nacos作为服务配置中心"></a>Nacos作为服务配置中心</h2><p>新建模块cloudalibaba-config-nacos-client3377</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置中心--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--服务发现--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>yml</p><p>在这里需要两个配置文件，一个bootstrap.yaml和application.yaml</p><p>为什么需要两个配置文件，因为Nacos和SpringClous-config原理一样，在项目初始化的时候，要先保障从配置中心进行拉取，拉取配置以后，才能够保障项目的正常启动，其中bootstrap.yaml 加载的优先级是要高于application.yaml的加载顺序的。</p><p>boostrap.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3377</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml</code></pre><p>application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev</code></pre><p>主启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConfigClientMain3377</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosConfigClientMain3377<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RefreshScope</span>   <span class="token comment" spellcheck="true">//用来保证动态刷新</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/config/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Data ID配置规则</p><p>文档参考地址：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p><pre><code>Data ID的组成规则$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。spring.profiles.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 $&#123;prefix&#125;.$&#123;file-extension&#125;file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</code></pre><p><img src="/2021/09/12/nacos/image-20210913080555822.png" alt="image-20210913080555822"></p><p>在Nocas的配置中心添加内容</p><p><img src="/2021/09/12/nacos/image-20210913081118884.png" alt="image-20210913081118884"></p><p>运行测试</p><p>测试地址：<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><p>测试结果</p><p><img src="/2021/09/12/nacos/image-20210913081706536.png" alt="image-20210913081706536"></p><h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p><img src="/2021/09/12/nacos/image-20210913082032005.png" alt="image-20210913082032005"></p><p>Namespace、Group ID、Data ID之间的关系</p><p><img src="/2021/09/12/nacos/image-20210913082351072.png" alt="image-20210913082351072"></p><p><img src="/2021/09/12/nacos/image-20210913082459598.png" alt="image-20210913082459598"></p><h3 id="Nacos之DataID"><a href="#Nacos之DataID" class="headerlink" title="Nacos之DataID"></a>Nacos之DataID</h3><p>新建一个DataId，nacos-config-client-test.yaml</p><p><img src="/2021/09/12/nacos/image-20210913083008015.png" alt="image-20210913083008015"></p><p><img src="/2021/09/12/nacos/image-20210913083436470.png" alt="image-20210913083436470"></p><p>重新启动进行测试</p><p>测试地址：<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><p><img src="/2021/09/12/nacos/image-20210913083519561.png" alt="image-20210913083519561"></p><h3 id="Nacos之Group"><a href="#Nacos之Group" class="headerlink" title="Nacos之Group"></a>Nacos之Group</h3><p>新建一个DEV_GROUP分组</p><p><img src="/2021/09/12/nacos/image-20210913083833823.png" alt="image-20210913083833823"></p><p>接下来是修改yaml</p><p><img src="/2021/09/12/nacos/image-20210913085141993.png" alt="image-20210913085141993"></p><p>运行测试</p><p>测试地址：<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><p><img src="/2021/09/12/nacos/image-20210913085156954.png" alt="image-20210913085156954"></p><h3 id="Nacos之Namespace"><a href="#Nacos之Namespace" class="headerlink" title="Nacos之Namespace"></a>Nacos之Namespace</h3><p>新建命名空间</p><p><img src="/2021/09/12/nacos/image-20210913085333048.png" alt="image-20210913085333048"></p><p>以下的两个命名空间是我新建的</p><p><img src="/2021/09/12/nacos/image-20210913085503638.png" alt="image-20210913085503638"></p><p>在dev命名空间下面新建两个配置</p><p>一个是在dev_group分组下的配置</p><p><img src="/2021/09/12/nacos/image-20210913090133549.png" alt="image-20210913090133549"></p><p>一个是在default_group分组下的配置</p><p><img src="/2021/09/12/nacos/image-20210913090324943.png" alt="image-20210913090324943"></p><p><img src="/2021/09/12/nacos/image-20210913090829899.png" alt="image-20210913090829899"></p><p>运行测试</p><p>测试地址：<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><p><img src="/2021/09/12/nacos/image-20210913090853716.png" alt="image-20210913090853716"></p><h2 id="Nacos集群化配置"><a href="#Nacos集群化配置" class="headerlink" title="Nacos集群化配置"></a>Nacos集群化配置</h2><p>nacos集群架构说明</p><p>数据库sql </p><p>gitHub地址：<a href="https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql">https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql</a></p><p>1、在nacos安装目录下找到nacos-mysql.sql的文件</p><p><img src="/2021/09/12/nacos/image-20210913092450529.png" alt="image-20210913092450529"></p><p>2、创建nacos数据库并且执行这个sql脚本文件</p><p><img src="/2021/09/12/nacos/image-20210913092718384.png" alt="image-20210913092718384"></p><p>3、修改conf目录下的application.properties配置文件，在这个配置文件中添加如下内容</p><pre><code>spring.datasource.platform=mysqldb.num=1db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=truedb.user=rootdb.password=root</code></pre><p>4、配置完成以后，重新启动Nacos</p><p>可以看到之前配置的东西都没有了，证明数据库切换成功</p><p><img src="/2021/09/12/nacos/image-20210913101942048.png" alt="image-20210913101942048"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="nacos" scheme="https://niuxiaocong.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>bus消息总线</title>
    <link href="https://niuxiaocong.github.io/2021/09/12/bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/"/>
    <id>https://niuxiaocong.github.io/2021/09/12/bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/</id>
    <published>2021-09-12T11:02:07.000Z</published>
    <updated>2021-09-12T11:59:00.714Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>B</p><h2 id="Bus消息总线"><a href="#Bus消息总线" class="headerlink" title="Bus消息总线"></a>Bus消息总线</h2><p>Bus是什么？</p><p>Bus支持两种消息代理：RabbitMQ和KafKa</p><p><img src="/2021/09/12/bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/image-20210912190733517.png" alt="image-20210912190733517"></p><p>Bus能干吗？</p><p><img src="/2021/09/12/bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/image-20210912191046601.png" alt="image-20210912191046601"></p><p>为何被称之为总线？</p><p><img src="/2021/09/12/bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/image-20210912191319494.png" alt="image-20210912191319494"></p><h2 id="RabbitMQ环境配置"><a href="#RabbitMQ环境配置" class="headerlink" title="RabbitMQ环境配置"></a>RabbitMQ环境配置</h2><p>安装erlang配置它的环境</p><p>百度网盘地址链接：<a href="https://pan.baidu.com/s/1rUcWAbQnaAvISdUNajijHg">https://pan.baidu.com/s/1rUcWAbQnaAvISdUNajijHg</a><br>提取码：788f</p><p>下载完成之后就是傻瓜式的安装</p><p>安装完成之后要配置它的环境变量，和配java的方式一样，这里就不啰嗦了</p><p>配置完成以后输入命令：erl -version 出现以下信息即可</p><p><img src="/2021/09/12/bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/image-20210912194331123.png" alt="image-20210912194331123"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="bus" scheme="https://niuxiaocong.github.io/tags/bus/"/>
    
  </entry>
  
  <entry>
    <title>config分布式配置</title>
    <link href="https://niuxiaocong.github.io/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/"/>
    <id>https://niuxiaocong.github.io/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/</id>
    <published>2021-09-12T06:16:04.000Z</published>
    <updated>2021-09-13T04:47:24.852Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Config分布式配置中心"><a href="#Config分布式配置中心" class="headerlink" title="Config分布式配置中心"></a>Config分布式配置中心</h2><p>SpringConfig 官网地址：<a href="https://docs.spring.io/spring-cloud-config/docs/current/reference/html/">https://docs.spring.io/spring-cloud-config/docs/current/reference/html/</a></p><p>分布式系统中面临的问题 - 配置问题</p><pre><code>    微服务意味着要将单体的应用拆分成一个个的子服务，每一个服务的粒度相对较小，所以系统中会出现大量的服务。每一个服务都需要一些必要的配置才能够正常运行，如果每一个微服务都有一个配置的话，一个两个服务还可以接受，一旦服务的配置多了起来的话，一大堆的配置等着你去配置，所以一个集中式的动态的配置服务管理设施是必不可少的</code></pre><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912142018531.png" alt="image-20210912142018531"></p><p>SpringCloud Config 是什么？</p><p>​    SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同的微服务应用的所有环境提供了一个中心化的外部配置。</p><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912142119686.png" alt="image-20210912142119686"></p><p>SpringCloud Config怎么用？</p><pre><code>SpringCloud Config分为服务端和客户端两部分服务端也称之为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口客户端则是通过指定的配置中心来管理应用资源，以及于业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置。服务器默认使用Git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容</code></pre><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912142331783.png" alt="image-20210912142331783"></p><h2 id="Config服务端配置与测试"><a href="#Config服务端配置与测试" class="headerlink" title="Config服务端配置与测试"></a>Config服务端配置与测试</h2><p>创建一个模块cloud-config-center-3344</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--config 服务端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>niuxiaocong/springcloud<span class="token punctuation">-</span>config.git          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config      <span class="token key atrule">label</span><span class="token punctuation">:</span> master<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">com.netflix.discovery</span><span class="token punctuation">:</span> <span class="token string">'OFF'</span>    <span class="token key atrule">org.springframework.cloud</span><span class="token punctuation">:</span> <span class="token string">'DEBUG'</span></code></pre><p>主启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplicationConfigCenter3344</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MainApplicationConfigCenter3344<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912154807103.png" alt="image-20210912154807103"></p><p>访问测试</p><p>测试地址：<a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></p><p>结果报错</p><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912154851263.png" alt="image-20210912154851263"></p><p>报错信息</p><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912154918937.png" alt="image-20210912154918937"></p><p>解决方案</p><p>修改yml，周阳老师配置的在我这有些问题</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/niuxiaocong/springcloud<span class="token punctuation">-</span>config.git          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config          <span class="token key atrule">force-pull</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">username</span><span class="token punctuation">:</span> xxxxx@qq.com          <span class="token key atrule">password</span><span class="token punctuation">:</span> xxxxx      <span class="token key atrule">label</span><span class="token punctuation">:</span> master<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">com.netflix.discovery</span><span class="token punctuation">:</span> <span class="token string">'OFF'</span>    <span class="token key atrule">org.springframework.cloud</span><span class="token punctuation">:</span> <span class="token string">'DEBUG'</span></code></pre><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912160646813.png" alt="image-20210912160646813"></p><p>再次启动测试</p><p>发现可以读取到配置中的内容</p><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912160217835.png" alt="image-20210912160217835"></p><p>配置读取规则</p><p>/{name} - {profile}.yml</p><p>/{label} - {name} - {profiles}.yml</p><p>label：分支</p><p>name：服务名</p><p>profile：环境</p><h2 id="Config客户端配置与测试"><a href="#Config客户端配置与测试" class="headerlink" title="Config客户端配置与测试"></a>Config客户端配置与测试</h2><p>新建客户端模块</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--config客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#客户端配置</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master   <span class="token comment" spellcheck="true">#分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config    <span class="token comment" spellcheck="true">#配置文件名称</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev    <span class="token comment" spellcheck="true">#读取后缀名称   上面的3个会进行综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344  </span><span class="token comment" spellcheck="true">#配置中心地址</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span>//7001/eureka</code></pre><p>主启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientMain3355</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConfigClientMain3355<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>业务类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/configInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>运行测试</p><p>测试地址：<a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></p><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912170539103.png" alt="image-20210912170539103"></p><p>bootstarp.yml</p><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912162213170.png" alt="image-20210912162213170"></p><h2 id="Config客户端之动态刷新"><a href="#Config客户端之动态刷新" class="headerlink" title="Config客户端之动态刷新"></a>Config客户端之动态刷新</h2><p>修改yml配置文件</p><pre class=" language-yml"><code class="language-yml">#暴露监控端点management:  endpoints:    web:      exposure:        include: "*"</code></pre><p>在业务类上添加这个@RefreshScope  注解，实现自动刷新</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span>   <span class="token comment" spellcheck="true">//自动刷新</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/configInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/12/config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE/image-20210912171708290.png" alt="image-20210912171708290"></p><p>做完以上几步之后还需要发送一条命令</p><pre class=" language-bash"><code class="language-bash">curl -X POST <span class="token string">"http://localhost:3355/actuator/refresh"</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="config" scheme="https://niuxiaocong.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>GateWay</title>
    <link href="https://niuxiaocong.github.io/2021/09/12/GateWay/"/>
    <id>https://niuxiaocong.github.io/2021/09/12/GateWay/</id>
    <published>2021-09-12T00:23:47.000Z</published>
    <updated>2021-09-12T09:42:55.919Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="GateWay介绍"><a href="#GateWay介绍" class="headerlink" title="GateWay介绍"></a>GateWay介绍</h2><p>GateWay官网地址：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/">https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/</a></p><p>GateWay Github官网地址：<a href="https://github.com/spring-cloud/spring-cloud-gateway">https://github.com/spring-cloud/spring-cloud-gateway</a></p><p>GateWay是什么？</p><pre><code>网关</code></pre><p>GateWay能干吗？</p><pre><code>可以做反向代理、鉴权、流量控制、熔断、日志监控</code></pre><p>GateWay三大核心概念</p><p>路由（Route）</p><p>​    构建网关的基本模块，它是由ID、目标URL、一系列的断言和过滤器组成、如果断言为true则匹配该路由</p><p>断言（Predicate）</p><p>过滤（Filter）</p><p>​    指的是Spring框架中GateWayFilter实例，使用过滤器，可以在请求被路由前后对请求进行修改</p><h2 id="创建GateWay网关模块"><a href="#创建GateWay网关模块" class="headerlink" title="创建GateWay网关模块"></a>创建GateWay网关模块</h2><p>新建模块</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Eureka 客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka</code></pre><p>主启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayMain9527</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>GateWayMain9527<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动测试</p><p>出现以下结果</p><p>翻译：在类路径上发现Spring MVC，目前与Spring Cloud Gateway不兼容。请删除spring-boot-starter-web依赖。</p><p><img src="/2021/09/12/GateWay/image-20210912093424004.png" alt="image-20210912093424004"></p><p>解决方案：移除掉starter-web模块</p><p><img src="/2021/09/12/GateWay/image-20210912094451991.png" alt="image-20210912094451991"></p><p>添加网关配置</p><p>在yml中添加如下配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh                   <span class="token comment" spellcheck="true">#路由的ID，没有固定的规则，但要求唯一，建议配合服务名</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001          </span><span class="token comment" spellcheck="true">#匹配后提供服务的路由地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/get/**            <span class="token comment" spellcheck="true">#断言，路径相匹配的进行路由</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2                   <span class="token comment" spellcheck="true">#路由的ID，没有固定的规则，但要求唯一，建议配合服务名</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001        </span><span class="token comment" spellcheck="true">#匹配后提供服务的路由地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/lb/**           <span class="token comment" spellcheck="true">#断言，路径相匹配的进行路由</span></code></pre><p>重新启动测试</p><p>可以看到网关模块被注册进来了</p><p><img src="/2021/09/12/GateWay/image-20210912100056412.png" alt="image-20210912100056412"></p><p>运行测试</p><p>测试地址：<a href="http://localhost:9527/payment/get/1">http://localhost:9527/payment/get/1</a></p><p>测试的结果，仍然可以通过网关进行访问，淡化的真实的接口</p><p><img src="/2021/09/12/GateWay/image-20210912100242900.png" alt="image-20210912100242900"></p><h2 id="路由配置的两种方式"><a href="#路由配置的两种方式" class="headerlink" title="路由配置的两种方式"></a>路由配置的两种方式</h2><p>方式一：在yml文件中进行配置，如上</p><p>方式二：代码中注入RouterLocator的Bean</p><p>在getway网关模块中添加如下配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RouteLocator <span class="token function">customRouteLocator</span><span class="token punctuation">(</span>RouteLocatorBuilder routeLocatorBuilder<span class="token punctuation">)</span><span class="token punctuation">{</span>        RouteLocatorBuilder<span class="token punctuation">.</span>Builder routes <span class="token operator">=</span> routeLocatorBuilder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"path_route_atguigu"</span><span class="token punctuation">,</span>r <span class="token operator">-</span><span class="token operator">></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/12/GateWay/image-20210912102642156.png" alt="image-20210912102642156"></p><p>启动测试</p><p>测试地址：<a href="http://localhost:9527/guonei">http://localhost:9527/guonei</a></p><p>可以看到已经映射到了百度新闻的网址</p><p><img src="/2021/09/12/GateWay/image-20210912102750829.png" alt="image-20210912102750829"></p><h2 id="配置动态路由"><a href="#配置动态路由" class="headerlink" title="配置动态路由"></a>配置动态路由</h2><p>配置gateway 的yml配置文件</p><pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh                   <span class="token comment" spellcheck="true">#路由的ID，没有固定的规则，但要求唯一，建议配合服务名</span>          <span class="token comment" spellcheck="true">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/get/**            <span class="token comment" spellcheck="true">#断言，路径相匹配的进行路由</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2                   <span class="token comment" spellcheck="true">#路由的ID，没有固定的规则，但要求唯一，建议配合服务名</span>          <span class="token comment" spellcheck="true">#uri: http://localhost:8001        #匹配后提供服务的路由地址</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/lb/**           <span class="token comment" spellcheck="true">#断言，路径相匹配的进行路由</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true">#开启从注册中心动态创建路由的功能，利用微服务进行路由</span></code></pre><p>修改完成以后重新运行测试</p><p>测试地址：<a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a></p><p>可能会出现503的情况，出现503的话就稍等一会重新请求</p><p><img src="/2021/09/12/GateWay/image-20210912112843644.png" alt="image-20210912112843644"></p><p><img src="/2021/09/12/GateWay/image-20210912112852379.png" alt="image-20210912112852379"></p><h2 id="常用的Predicate表达式"><a href="#常用的Predicate表达式" class="headerlink" title="常用的Predicate表达式"></a>常用的Predicate表达式</h2><p>具体参考SpringCloud官网：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#the-method-route-predicate-factory">https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#the-method-route-predicate-factory</a></p><p><img src="/2021/09/12/GateWay/image-20210912134325855.png" alt="image-20210912134325855"></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>SpringCloud官网参考地址：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories">https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories</a></p><img src="/2021/09/12/GateWay/image-20210912134743478.png" alt="image-20210912134743478" style="zoom:100%;"><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>在负责控制网关的模块中cloud-gateway-gateway9527添加如下内容</p><p>1、编写自定义的过滤器类，并实现GlobalFilter, Ordered 接口</p><p><img src="/2021/09/12/GateWay/image-20210912135216628.png" alt="image-20210912135216628"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写配置代码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"***********come in MyLogGateWayFilter"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"***********用户名为null,非法用户┭┮﹏┭┮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新启动服务进行测试</p><p>上面代码的意思是请求需要携带一个uname的参数，如果没有这个参数则请求会被过滤掉</p><p>不带参数的请求：<a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a></p><p><img src="/2021/09/12/GateWay/image-20210912141312786.png" alt="image-20210912141312786"></p><p>带参数的请求：<a href="http://localhost:9527/payment/lb?uname=11">http://localhost:9527/payment/lb?uname=11</a></p><p><img src="/2021/09/12/GateWay/image-20210912141352837.png" alt="image-20210912141352837"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="GateWay" scheme="https://niuxiaocong.github.io/tags/GateWay/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix</title>
    <link href="https://niuxiaocong.github.io/2021/09/11/Hystrix/"/>
    <id>https://niuxiaocong.github.io/2021/09/11/Hystrix/</id>
    <published>2021-09-11T03:07:33.000Z</published>
    <updated>2021-09-13T04:49:46.343Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Hystrix介绍"><a href="#Hystrix介绍" class="headerlink" title="Hystrix介绍"></a>Hystrix介绍</h2><p>码云官网地址：<a href="https://gitee.com/nilera/Hystrix/wikis/How-To-Use">https://gitee.com/nilera/Hystrix/wikis/How-To-Use</a></p><p>GitHub官网地址：<a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p><p>分布式系统面临的问题</p><p><img src="/2021/09/11/Hystrix/image-20210911110857117.png" alt="image-20210911110857117"></p><p><img src="/2021/09/11/Hystrix/image-20210911111000285.png" alt="image-20210911111000285"></p><p>Hystrix是什么？</p><p><img src="/2021/09/11/Hystrix/image-20210911165537881.png" alt="image-20210911165537881"></p><p>Hystrix能干吗？</p><pre><code>服务降级服务熔断接近实时监控</code></pre><h2 id="Hystrix中重要概念"><a href="#Hystrix中重要概念" class="headerlink" title="Hystrix中重要概念"></a>Hystrix中重要概念</h2><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>服务器繁忙，请稍后重试，不让客户端等待并立刻返回一个友好的提示，fallback</p><p>那些情况会触发降级</p><p>​    1、运行超时</p><p>​    2、程序出现异常</p><p>​    3、服务熔断触发服务降级</p><p>​    4、线程池/信号量打满也会导致服务降级</p><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>当服务达到最大访问量的时候，直接拒绝访问，并返回友好提示，和保险丝的原理类似</p><p><img src="/2021/09/11/Hystrix/image-20210911210728522.png" alt="image-20210911210728522"></p><p>服务降级—–》服务熔断—–》恢复调用链路</p><h3 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h3><p>秒杀高并发操作，严禁一窝蜂的拥挤过来，大家排队，有序的进行</p><h2 id="Hystrix支付微服务模块搭建"><a href="#Hystrix支付微服务模块搭建" class="headerlink" title="Hystrix支付微服务模块搭建"></a>Hystrix支付微服务模块搭建</h2><p>新建模块cloud-provider-hystrix-payment8001</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--hystrix--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Eureka 客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>hystrix<span class="token punctuation">-</span>payment  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost/db2019<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#是否要将自己入驻到EurekaServer 默认为 true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#是否从EurekaServer抓取已有的注册信息，默认为true，单节点无所谓，集群必须设置ture才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> CloudProviderHystrixPayment    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true">#显示ip</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*.xml  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.springclould.entity</code></pre><p>主启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixPaymentMain8001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HystrixPaymentMain8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>service</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_ok</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"线程池"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"paymentInfo_ok,id:"</span><span class="token operator">+</span>id <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"哈哈"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> timeNumber <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>timeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"线程池"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"paymentInfo_TimeOut,id:"</span><span class="token operator">+</span>id <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"┭┮﹏┭┮"</span> <span class="token operator">+</span> <span class="token string">"耗时3秒钟"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> PaymentService paymentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/hystrix/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">paymentInfo_ok</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*********result:"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String  <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*********result:"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动测试</p><p>测试地址1：<a href="http://localhost:8001/payment/hystrix/ok/1">http://localhost:8001/payment/hystrix/ok/1</a></p><p><img src="/2021/09/11/Hystrix/image-20210911181110906.png" alt="image-20210911181110906"></p><p>测试地址2：<a href="http://localhost:8001/payment/hystrix/timeout/1">http://localhost:8001/payment/hystrix/timeout/1</a></p><p><img src="/2021/09/11/Hystrix/image-20210911181103606.png" alt="image-20210911181103606"></p><h2 id="Jmeter压力测试"><a href="#Jmeter压力测试" class="headerlink" title="Jmeter压力测试"></a>Jmeter压力测试</h2><p><img src="/2021/09/11/Hystrix/image-20210911183843292.png" alt="image-20210911183843292"></p><h2 id="搭建消费者模块"><a href="#搭建消费者模块" class="headerlink" title="搭建消费者模块"></a>搭建消费者模块</h2><p>创建模块cloud-consumer-feign-hystrix-order80</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--hystrix--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--OpenFeign--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Eureka 客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>feign<span class="token punctuation">-</span>hystrix<span class="token punctuation">-</span>order  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost/db2019<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka</code></pre><p>主启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span>     <span class="token comment" spellcheck="true">//Eureka客户端</span><span class="token annotation punctuation">@EnableFeignClients</span>     <span class="token comment" spellcheck="true">//激活OpenFeign</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerFeignHystrixOrderMain80</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerFeignHystrixOrderMain80<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>service</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentHystrixService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/hystrix/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String  <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHystrixController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> PaymentHystrixService paymentHystrixService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/hystrix/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token operator">=</span> paymentHystrixService<span class="token punctuation">.</span><span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String  <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token operator">=</span> paymentHystrixService<span class="token punctuation">.</span><span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动测试</p><p>测试地址1：<a href="http://localhost/consumer/payment/hystrix/ok/1">http://localhost/consumer/payment/hystrix/ok/1</a></p><p><img src="/2021/09/11/Hystrix/image-20210911194458542.png" alt="image-20210911194458542"></p><p>测试地址2：<a href="http://localhost/consumer/payment/hystrix/timeout/31">http://localhost/consumer/payment/hystrix/timeout/31</a></p><p>超时了</p><p><img src="/2021/09/11/Hystrix/image-20210911194604339.png" alt="image-20210911194604339"></p><h2 id="服务降级-1"><a href="#服务降级-1" class="headerlink" title="服务降级"></a>服务降级</h2><h3 id="支付模块服务降级"><a href="#支付模块服务降级" class="headerlink" title="支付模块服务降级"></a>支付模块服务降级</h3><p>先从自身找问题，设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作为服务降级fallback</p><p>对cloud-provider-hystrix-payment8001模块的service进行修改</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentInfo_TimeOutHandler"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"3000"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> timeNumber <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>timeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"线程池"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"paymentInfo_TimeOut,id:"</span><span class="token operator">+</span>id <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"┭┮﹏┭┮"</span> <span class="token operator">+</span> <span class="token string">"耗时3秒钟"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_TimeOutHandler</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"线程池"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"paymentInfo_TimeOut,id:"</span><span class="token operator">+</span>id <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"呜呜呜，兜底的方法"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/Hystrix/image-20210911200725372.png" alt="image-20210911200725372"></p><p>主启动类上标注@EnableCircuitBreaker这个 注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixPaymentMain8001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HystrixPaymentMain8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/Hystrix/image-20210911200853389.png" alt="image-20210911200853389"></p><p>运行测试</p><p>超时的运行结果</p><p><img src="/2021/09/11/Hystrix/image-20210911200942880.png" alt="image-20210911200942880"></p><p>没有超时的运行结果</p><p><img src="/2021/09/11/Hystrix/image-20210911201132974.png" alt="image-20210911201132974"></p><h3 id="订单模块服务降级"><a href="#订单模块服务降级" class="headerlink" title="订单模块服务降级"></a>订单模块服务降级</h3><p>首先修改消费者的配置文件</p><p>添加如下配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>主启动类上标注@EnableHystrix注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span>     <span class="token comment" spellcheck="true">//Eureka客户端</span><span class="token annotation punctuation">@EnableFeignClients</span>     <span class="token comment" spellcheck="true">//激活OpenFeign</span><span class="token annotation punctuation">@EnableHystrix</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerFeignHystrixOrderMain80</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerFeignHystrixOrderMain80<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/Hystrix/image-20210911201815067.png" alt="image-20210911201815067"></p><p>修改controller方法</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentTimeOutFallBackMethod"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"1500"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String  <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token operator">=</span> paymentHystrixService<span class="token punctuation">.</span><span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">paymentTimeOutFallBackMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是消费者80，对方支付系统繁忙请10秒钟以后在重试，呜呜呜"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/Hystrix/image-20210911202715719.png" alt="image-20210911202715719"></p><p>运行测试</p><p><img src="/2021/09/11/Hystrix/image-20210911202737729.png" alt="image-20210911202737729"></p><p>现在代码中存在的问题 ：每一个业务方法对应一个兜底方法，代码会很膨胀 </p><h2 id="全局服务降级DefaultProperties"><a href="#全局服务降级DefaultProperties" class="headerlink" title="全局服务降级DefaultProperties"></a>全局服务降级DefaultProperties</h2><p>为每一个方法配置一个服务降级的方法，技术上来说是可以的，但是实际上很傻。</p><p>除了个别重要核心业务有专属，其他普通的可以通过@DefaultProperties(defaultFallback = “”)注解配置，让它们转跳到统一处理结果的页面</p><p>如何配置</p><p>修改cloud-provider-hystrix-payment8001模块中的service</p><p>1、添加统一处理的方法</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//全局统一处理</span>    <span class="token keyword">public</span> String <span class="token function">payment_Global_FallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Global异常信息处理，请稍后重新尝试"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/Hystrix/image-20210911204246830.png" alt="image-20210911204246830"></p><p>2、在类上面标注@DefaultProperties(defaultFallback = “payment_Global_FallbackMethod”)注解</p><p><img src="/2021/09/11/Hystrix/image-20210911204355000.png" alt="image-20210911204355000"></p><p>3、添加@HystrixCommand注解</p><p><img src="/2021/09/11/Hystrix/image-20210911204456083.png" alt="image-20210911204456083"></p><p>运行测试</p><p><img src="/2021/09/11/Hystrix/image-20210911204121382.png" alt="image-20210911204121382"></p><h2 id="通配服务降级FeignFallback"><a href="#通配服务降级FeignFallback" class="headerlink" title="通配服务降级FeignFallback"></a>通配服务降级FeignFallback</h2><p>更加优雅的处理服务降级</p><p>这次针对的是消费端cloud-consumer-feign-hystrix-order80，模拟宕机</p><p>1、实现PaymentHystrixService接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当一个服务宕机以后，就掉用这里的方法</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentHystrixService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"--------PaymentFallbackService  fall back-paymentInfo-ok,/(ㄒoㄒ)/~~"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"--------PaymentFallbackService  fall back-paymentInfo-timeout,/(ㄒoㄒ)/~~"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/Hystrix/image-20210911210137025.png" alt="image-20210911210137025"></p><p>2、向@FeignClient注解中添加如下内容</p><pre><code>@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;,fallback = PaymentFallbackService.class)</code></pre><p><img src="/2021/09/11/Hystrix/image-20210911210412417.png" alt="image-20210911210412417"></p><h2 id="服务熔断案例"><a href="#服务熔断案例" class="headerlink" title="服务熔断案例"></a>服务熔断案例</h2><p>在cloud-provider-hystrix-payment8001模块中的service中添加如下内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentCircuitBreaker_fallback"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//是否开启断路器</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//请求次数</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间窗口</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//失败率达到多少以后跳闸</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"*********id,不能负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String serialNumber <span class="token operator">=</span> IdUtil<span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"调用成功,流水号："</span> <span class="token operator">+</span> serialNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">paymentCircuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"id 不能为负数，请稍后重试，┭┮﹏┭┮，id："</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/Hystrix/image-20210912072052779.png" alt="image-20210912072052779"></p><p>在controller中添加如下内容</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/circuit/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"********result:"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/Hystrix/image-20210912072138230.png" alt="image-20210912072138230"></p><p>主启动类上添加@EnableCircuitBreaker注解</p><p><img src="/2021/09/11/Hystrix/image-20210912072241677.png" alt="image-20210912072241677"></p><p>运行测试</p><p>测试地址</p><p><a href="http://localhost:8001/payment/circuit/-1">http://localhost:8001/payment/circuit/-1</a></p><p><img src="/2021/09/11/Hystrix/image-20210912072447869.png" alt="image-20210912072447869"></p><p>当多次执行的结果有异常的时候，Hystrix会进行熔断，过一段时间当运行的结果正确率上来之后又会慢慢恢复</p><p>Hystrix服务熔断小总结</p><p>断路器在什么情况下开始起作用</p><p><img src="/2021/09/11/Hystrix/image-20210912073022731.png" alt="image-20210912073022731"></p><p>断路器开启或关闭的条件</p><p><img src="/2021/09/11/Hystrix/image-20210912073224314.png" alt="image-20210912073224314"></p><p>断路器打开之后</p><p><img src="/2021/09/11/Hystrix/image-20210912073352618.png" alt="image-20210912073352618"></p><h2 id="Hystrix图形化Dashboard搭建"><a href="#Hystrix图形化Dashboard搭建" class="headerlink" title="Hystrix图形化Dashboard搭建"></a>Hystrix图形化Dashboard搭建</h2><p>新建模块cloud-consumer-hystrix-dashboard9001</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yaml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span></code></pre><p>主启动</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableHystrixDashboard</span>            <span class="token comment" spellcheck="true">//要想使用Hystrix的监控界面，需要添加这个注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixDashboardMain9001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HystrixDashboardMain9001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行测试访问：<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p>出现以下界面证明就成功了</p><p><img src="/2021/09/11/Hystrix/image-20210912075819315.png" alt="image-20210912075819315"></p><h2 id="Hystrix监控实战"><a href="#Hystrix监控实战" class="headerlink" title="Hystrix监控实战"></a>Hystrix监控实战</h2><p>需要在被监控的模块上添加如下的内容</p><p>我这是cloud-provider-hystrix-payment8001模块</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixPaymentMain8001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HystrixPaymentMain8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        HystrixMetricsStreamServlet streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletRegistrationBean registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"HystrixMetricsStreamServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/Hystrix/image-20210912081319289.png" alt="image-20210912081319289"></p><p>启动测试</p><p><img src="/2021/09/11/Hystrix/image-20210912081416710.png" alt="image-20210912081416710"></p><p>点击Monitor Stream这个按钮，就会进入到监控的页面</p><p><img src="/2021/09/11/Hystrix/image-20210912081501112.png" alt="image-20210912081501112"></p><p>接下来进行测试</p><p>测试地址：<a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a>    多执行几次</p><p><img src="/2021/09/11/Hystrix/image-20210912081714474.png" alt="image-20210912081714474"></p><p>测试地址：<a href="http://localhost:8001/payment/circuit/-1">http://localhost:8001/payment/circuit/-1</a>    多执行几次</p><p><img src="/2021/09/11/Hystrix/image-20210912081750452.png" alt="image-20210912081750452"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Hystrix" scheme="https://niuxiaocong.github.io/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>OpenFeign</title>
    <link href="https://niuxiaocong.github.io/2021/09/11/OpenFeign/"/>
    <id>https://niuxiaocong.github.io/2021/09/11/OpenFeign/</id>
    <published>2021-09-11T01:01:23.000Z</published>
    <updated>2021-09-11T03:07:42.758Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><p>官网地址：<a href="https://spring.io/projects/spring-cloud-openfeign">https://spring.io/projects/spring-cloud-openfeign</a></p><p>GitHub地址：<a href="https://github.com/spring-cloud/spring-cloud-openfeign">https://github.com/spring-cloud/spring-cloud-openfeign</a></p><p>OpenFeign是什么？</p><pre><code>openFegin是一个声明式WebService客户端。使用Fegin能让编写的Web Service客户端更加夹断。它的使用方法是定义一个服务接口然后在上面添加注解。OpenFegin也支持可拔插式的编码器和解码器。Spring Cloud对Fegin进行了封装，十七支持Spring MVC标准注解和HttpMessageConverters。OpenFegin可以和Eureka和Ribbon组合使用支持负载均衡</code></pre><p>Fegin能干什么？</p><pre><code>Fegin在使编写Java Http客户端变得更加容易之前在使用Ribbon+RestTemplate时候，利用RestTemplate对http请求的封装处理，形成了一套模板化的调用方法，但是在实际开发法中，由于对服务的一栏的调用可能不止一处，往往一个接口欧会被多处调用，所以通常都会针对每一个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Fegin在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义。在Fegin的实现下，我们需要创建一个接口并使用注解的方式来配置它，即可完成对服务提供方的接口绑定，简化了使用Spring Colud Ribbon是，自动封装服务调用客户端的开发量Fegin集成了Ribbon利用Ribbon维护了Paymebt服务列表的信息，并且通过轮询事项了客户端的负载均衡。与Ribbon不同的是，通过Fegin只需要定义服务绑定接口并且使用声明式的方法，完成服务调用</code></pre><p>Feign和OpenFeign之间的区别</p><p><img src="/2021/09/11/OpenFeign/image-20210911094506277.png" alt="image-20210911094506277"></p><h2 id="OpenFeign服务调用"><a href="#OpenFeign服务调用" class="headerlink" title="OpenFeign服务调用"></a>OpenFeign服务调用</h2><p>新建模块cloud-consumer-fegin-order80</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--OpenFeign--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Eureka 客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>yml配置</p><p>因为我在pom文件中添加了，数据库相关的内容，所以这里也就配置了数据源，其实不配置也是可以的</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost/db2019<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>oder<span class="token punctuation">-</span>openfeign</code></pre><p>service</p><p>不要忘记添加@Component注解，@FeignClient(value = “对应的服务名称”)</p><p><img src="/2021/09/11/OpenFeign/image-20210911102155737.png" alt="image-20210911102155737"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/get/{id}"</span><span class="token punctuation">)</span>    CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">getPayMentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> PaymentService paymentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consume/payment/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> paymentService<span class="token punctuation">.</span><span class="token function">getPayMentById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主启动</p><p>如果想要使用OpenFeign则需要在主启动类上添加@EnableFeignClients注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFeignMain80</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderFeignMain80<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行测试</p><p>测试地址：<a href="http://localhost/consume/payment/get/1">http://localhost/consume/payment/get/1</a></p><p><img src="/2021/09/11/OpenFeign/image-20210911102518457.png" alt="image-20210911102518457"></p><p><img src="/2021/09/11/OpenFeign/image-20210911102544991.png" alt="image-20210911102544991"></p><p>总结：</p><p>主启动上@EnableFeignClients不能忘</p><p>服务层（service）上</p><pre><code>@Component@FeignClient(value = &quot;服务名&quot;)</code></pre><p><img src="/2021/09/11/OpenFeign/image-20210911102809814.png" alt="image-20210911102809814"></p><h2 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h2><p>服务提供者模块Controller</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//超时调用</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/feign/timeout"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentFeignTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> serverPort<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="/2021/09/11/OpenFeign/image-20210911104140634.png" alt="image-20210911104140634"></p><p>消费者模块Service</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/feign/timeout"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentFeignTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/09/11/OpenFeign/image-20210911104105630.png" alt="image-20210911104105630"></p><p>消费者模块Controller</p><p><img src="/2021/09/11/OpenFeign/image-20210911104044624.png" alt="image-20210911104044624"></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//超时调用</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/feign/timeout"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentFeignTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> paymentService<span class="token punctuation">.</span><span class="token function">paymentFeignTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>运行测试</p><p><img src="/2021/09/11/OpenFeign/image-20210911103827783.png" alt="image-20210911103827783"></p><p>自定义超时时间</p><p>在yml中添加以下内容</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#指的是建立链接所用的事件，适用于网络正常情况下，两端链接所需要的时间</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token comment" spellcheck="true">#值的是建立后从服务器读取到可用资源所用时间</span>  <span class="token key atrule">Connectimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span></code></pre><p>重新启动测试</p><p>建议将时间调的稍微长一点，否则可能还是会超时</p><p><img src="/2021/09/11/OpenFeign/image-20210911104802142.png" alt="image-20210911104802142"></p><h2 id="OpenFeign日志增强"><a href="#OpenFeign日志增强" class="headerlink" title="OpenFeign日志增强"></a>OpenFeign日志增强</h2><p>日志级别</p><pre><code>NONE: 默认，不显示任何日志BASIC: 仅仅记录请求方法、URL、响应状态码以及执行时间HEADERS: 除了BASIC中定义的信息之外，还有请求和相应的头信息FULL: 除了HEADERS中定义的信息之外，还有请求和相应的正文以及元数据</code></pre><p><img src="/2021/09/11/OpenFeign/image-20210911105026161.png" alt="image-20210911105026161"></p><p>写OpenFeign的配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    Logger<span class="token punctuation">.</span>Level <span class="token function">feignLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在yml文件中添加如下内容</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#fegin日志以什么级别监控那个端口</span>    <span class="token key atrule">com.atguigu.springcloud.service.PaymentFeginService</span><span class="token punctuation">:</span> debug</code></pre><p>重新启动测试</p><p>请求地址：<a href="http://localhost/consume/payment/get/1">http://localhost/consume/payment/get/1</a></p><p><img src="/2021/09/11/OpenFeign/image-20210911105836863.png" alt="image-20210911105836863"></p><p><img src="/2021/09/11/OpenFeign/image-20210911105950523.png" alt="image-20210911105950523"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="OpenFeign" scheme="https://niuxiaocong.github.io/tags/OpenFeign/"/>
    
  </entry>
  
  <entry>
    <title>Ribbon</title>
    <link href="https://niuxiaocong.github.io/2021/09/10/Ribbon/"/>
    <id>https://niuxiaocong.github.io/2021/09/10/Ribbon/</id>
    <published>2021-09-10T12:24:06.000Z</published>
    <updated>2021-09-11T01:03:19.483Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Ribbon介绍"><a href="#Ribbon介绍" class="headerlink" title="Ribbon介绍"></a>Ribbon介绍</h2><p>Ribbon github官网：<a href="https://github.com/Netflix/ribbon">https://github.com/Netflix/ribbon</a></p><p>什么是ribbon？</p><pre><code>springCloud Ribbon 是基于Netfix Ribbon实现的一套客户端，负载均衡的工具。Ribbon是Netfix发布的开源项目，主要的功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项例如链接超时，重试等。简单来说，就是在配置文件中列出Load Balancer （简称LB）后面所有的机器Ribbon会自动的帮助你基于某种规则（例如：简单轮询，随机链接等）去链接这些机器，我们很容易使用Ribbon实现自定义的负载均衡算法</code></pre><p>负载均衡 Load Balancer是什么？</p><pre><code>简单理解就是将用户的各个请求平均分配在多个服务商，从而达到高可用HA常见的负载均衡软件Nginx，LV5，硬件F5等</code></pre><p> Ribbon本地负载均衡客户端Vs Nginx服务端负载均衡的区别？</p><pre><code>Nginx 是服务器负载均衡，客户端所有的请求都会交给Nginx。然后由Nginx实现转发请求，即负载均衡是由服务端实现的Ribbon是本地负载均衡，在调用微服务接口时候，会在注册中心获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术</code></pre><p>Ribbon可以干嘛？</p><pre><code>集中式Load Balancer    即在服务的消费方和提供方之间使用独立的LB设施（硬件、软件），由该设施负责吧访问请求通过某种策略转发至服务的提供方进程内Load Balancer    将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器，Ribbon就是属于进程内LB，它只是一个类库，继承与消费方进程，消费方通过它来获取到服务提供方的地址</code></pre><p>一句话可以总结：负载均衡+RestTemplate 调用，Ribbon其实就是一个软件负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，是eureka结合使用只是其中一个例子</p><p><img src="/2021/09/10/Ribbon/image-20210910203639716.png" alt="image-20210910203639716"></p><p>Ribbon的工作流程，Ribbon在工作的时候分成两步</p><p>第一步，首先选择EurekaServer，它优先选择在同一个区域内负载较少的server</p><p>第二步，在根据用户指定策略，在从server取到的服务注册列表中选择一个地址</p><h2 id="RestTemplate的使用"><a href="#RestTemplate的使用" class="headerlink" title="RestTemplate的使用"></a>RestTemplate的使用</h2><pre><code>//get请求该方法返回ResponseEntity，该对象是Spring对Http请求响应的封装，其中主要存储了HTTP的几个重要元素，比如说HTTP请求码的枚举对象HttpStatus（404，405，500等错误码），它的父类事HttpEntity中还存储着HTTP请求的头信息对象HttpHeaders以及泛型类型的请求体对象。//post请求其包含三种重载的方法。第一个重载方法和第二个重载函数的uriVariables参数都用来对url中的参数进行绑定使用，responseType是返回对象的类型定义。增加的request参数，该参数可以是一个普通对象，也可以是一个HttpEntity对象。如果是一个普通对象，而非HttpEntity对象的时候，RestTemplate会将普通对象转换成HttpEntity对象。其中Object中不仅包含了body内容，也包含了header的内容。</code></pre><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><pre><code>//get请求该方法可以理解对getForEntity的进一步封装，它通过HttpMessageConverterExtractor对http的请求响应体body内容进行对象转换，实现请求直接返回包装好的对象内容。</code></pre><p><img src="/2021/09/10/Ribbon/image-20210910204524106.png" alt="image-20210910204524106"></p><p><strong>getForEntity函数</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consume/payment/getForEntity/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">getPayment2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>        ResponseEntity<span class="token operator">&lt;</span>CommonResult<span class="token operator">></span> entity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span>payment_url<span class="token operator">+</span><span class="token string">"/payment/get/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span>CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is2xxSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> entity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"操作失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>cloud-consumer-order80消费模块调用cloud-provider-payment8001服务模块</p><p>访问地址：<a href="http://localhost/consume/payment/getForEntity/1">http://localhost/consume/payment/getForEntity/1</a></p><p><img src="/2021/09/10/Ribbon/image-20210910212531899.png" alt="image-20210910212531899"></p><p><strong>getForObject函数</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consume/payment/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>payment_url<span class="token operator">+</span><span class="token string">"/payment/get/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span>CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>cloud-consumer-order80消费模块调用cloud-provider-payment8001服务模块</p><p>访问地址：<a href="http://localhost/consume/payment/get/1">http://localhost/consume/payment/get/1</a></p><p><img src="/2021/09/10/Ribbon/image-20210910213127981.png" alt="image-20210910213127981"></p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p><strong>postForEntity函数</strong></p><pre><code>其包含三种重载的方法。第一个重载方法和第二个重载函数的uriVariables参数都用来对url中的参数进行绑定使用，responseType是返回对象的类型定义。增加的request参数，该参数可以是一个普通对象，也可以是一个HttpEntity对象。如果是一个普通对象，而非HttpEntity对象的时候，RestTemplate会将普通对象转换成HttpEntity对象。其中Object中不仅包含了body内容，也包含了header的内容。</code></pre><p><strong>postForObject函数</strong></p><pre><code>该方法可以理解为对getForEntity的进一步封装，它通过org.springframework.web.client.HttpMessageConverterExtractor对HTTP的请求响应体body内容进行对象转换，实现请求直接返回包装好的对象内容。</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/create"</span><span class="token punctuation">)</span><span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>Payment payment<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>payment_url<span class="token operator">+</span><span class="token string">"/payment/create"</span><span class="token punctuation">,</span>payment<span class="token punctuation">,</span>CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>cloud-consumer-order80消费模块调用cloud-provider-payment8001服务模块</p><p>访问地址：<a href="http://localhost/consumer/payment/create?serial=luxiaolu">http://localhost/consumer/payment/create?serial=luxiaolu</a></p><p>浏览器只能进行Get请求，不可以直接使用Post，所以在这里需要使用postman工具</p><p><img src="/2021/09/10/Ribbon/image-20210910213340002.png" alt="image-20210910213340002"></p><p><img src="/2021/09/10/Ribbon/image-20210910213722109.png" alt="image-20210910213722109"></p><p><img src="/2021/09/10/Ribbon/image-20210910213811996.png" alt="image-20210910213811996"></p><p>Ribbon中默认自带的负载规则 </p><p>Ribbon中默认使用的是轮询的规则</p><p><img src="/2021/09/10/Ribbon/image-20210910215107948.png" alt="image-20210910215107948"></p><h2 id="Ribbon负载规则的替换"><a href="#Ribbon负载规则的替换" class="headerlink" title="Ribbon负载规则的替换"></a>Ribbon负载规则的替换</h2><p>编写自己的负载规则</p><p>注意这个自己定义的规则不能被@ComponentScan扫描到，如果被扫描到会产生一系列的错误</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySelfRule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IRule <span class="token function">myRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/10/Ribbon/image-20210910224210940.png" alt="image-20210910224210940"></p><p>主启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> MySelfRule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMain80</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderMain80<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/09/10/Ribbon/image-20210910224022099.png" alt="image-20210910224022099"></p><p>接下来启动测试即可</p><p><img src="/2021/09/10/Ribbon/image-20210910224357701.png" alt="image-20210910224357701"></p><h2 id="默认负载均衡轮询算法"><a href="#默认负载均衡轮询算法" class="headerlink" title="默认负载均衡轮询算法"></a>默认负载均衡轮询算法</h2><p>负载均衡算法：rest接口第几次请求 % 服务器集群的总量 = 实际调用服务器位置下标，每一次服务重新启动后rest接口从1开始计数</p><p><img src="/2021/09/10/Ribbon/image-20210910225338669.png" alt="image-20210910225338669"></p><h2 id="自定义轮询算法"><a href="#自定义轮询算法" class="headerlink" title="自定义轮询算法"></a>自定义轮询算法</h2><p>分别在cloud-provider-payment8001模块和cloud-provider-payment8002模块中的controller中加入如下内容</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/lb"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPayMentLB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> serverPort<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>1、在cloud-consumer-order80消费服务模块配置中注释掉@LoadBalanced </p><p><img src="/2021/09/10/Ribbon/image-20210911081106299.png" alt="image-20210911081106299"></p><p>2、新建LoadBalance接口</p><p>这个接口的作用是收集服务的实例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>    ServiceInstance <span class="token function">instances</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> serviceInstances<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现Loadbalancer接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLB</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认是从0开始的</span>    <span class="token keyword">private</span> AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算得出第几次访问</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> current<span class="token punctuation">;</span>        <span class="token keyword">int</span> next<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            next <span class="token operator">=</span> current<span class="token operator">>=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span>current<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******Next:"</span><span class="token operator">+</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实现负载均衡算法</span>    <span class="token comment" spellcheck="true">//rest接口第几次请求 % 服务器集群的总量 = 实际调用服务器位置下标，每一次服务重新启动后rest接口从1开始计数</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ServiceInstance <span class="token function">instances</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> serviceInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>serviceInstances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> serviceInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费者的controller</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/lb"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPaymentLB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instances <span class="token operator">==</span> null <span class="token operator">||</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">instances</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>        URI uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>uri<span class="token operator">+</span><span class="token string">"/payment/lb"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>启动测试</p><p>两个端口交替执行</p><p><img src="/2021/09/10/Ribbon/image-20210911085751558.png" alt="image-20210911085751558"></p><p><img src="/2021/09/10/Ribbon/image-20210911085800821.png" alt="image-20210911085800821"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Ribbon" scheme="https://niuxiaocong.github.io/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>Consul</title>
    <link href="https://niuxiaocong.github.io/2021/09/10/Consul/"/>
    <id>https://niuxiaocong.github.io/2021/09/10/Consul/</id>
    <published>2021-09-10T08:21:16.000Z</published>
    <updated>2021-09-10T14:59:51.995Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Consul简介"><a href="#Consul简介" class="headerlink" title="Consul简介"></a>Consul简介</h2><p>Consul官网 ：<a href="https://www.consul.io/docs/intro">https://www.consul.io/docs/intro</a></p><p>Consul下载地址：<a href="https://www.consul.io/downloads">https://www.consul.io/downloads</a></p><p>自己的GitHub下载地址：</p><p>自己的码云下载地址：</p><pre><code>Consul是一套开源的分布式服务发现和配置管理系统，它是由HashiCorp公司使用GO语言开发的。Consul提供了微服务系统中的服务治理、配置中心、总线控制等功能。这些功能中的每一个都可以根据需要单独的使用，也可以一起使用以构建全方位的服务网络，总之呢Consul提供了一种完整的服务网路解决方案。</code></pre><h2 id="Consul运行"><a href="#Consul运行" class="headerlink" title="Consul运行"></a>Consul运行</h2><p>你可以选择下载不同的版本win、mac、linux。我这里下载的是win</p><p>下载成功以后使以下用命令即可运行</p><pre><code>consul agent -dev </code></pre><p>能够看到如下界面证明已经成功了</p><p><img src="/2021/09/10/Consul/image-20210910165524971.png" alt="image-20210910165524971"></p><h2 id="服务提供者cloud-providerconsul-payment8006入驻Consul"><a href="#服务提供者cloud-providerconsul-payment8006入驻Consul" class="headerlink" title="服务提供者cloud-providerconsul-payment8006入驻Consul"></a>服务提供者cloud-providerconsul-payment8006入驻Consul</h2><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>yml</p><pre class=" language-yml"><code class="language-yml">server:  port: 8006spring:  application:    name: consul-provider-payment  cloud:    consul:      host: localhost      port: 8500      discovery:        service-name: ${spring.application.name}</code></pre><p>controller测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/consul"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">payMentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  <span class="token string">"SpringCloud whit consul:"</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">"\t\t"</span> <span class="token operator">+</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayMentMain8006</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PayMentMain8006<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行测试</p><p>安全检查失败了？</p><p><img src="/2021/09/10/Consul/image-20210910171005149.png" alt="image-20210910171005149"></p><p><img src="/2021/09/10/Consul/image-20210910171031138.png" alt="image-20210910171031138"></p><p>解决方案：</p><p>这个包是用做健康度监控的，必须要导入这个包</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="服务消费者入驻Consul"><a href="#服务消费者入驻Consul" class="headerlink" title="服务消费者入驻Consul"></a>服务消费者入驻Consul</h2><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>yml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consul<span class="token punctuation">-</span>consume<span class="token punctuation">-</span>order  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span></code></pre><p>config</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderConsulController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String INVOKE_URL <span class="token operator">=</span> <span class="token string">"http://consul-provider-payment"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/consul"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token operator">=</span>  restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>INVOKE_URL<span class="token operator">+</span><span class="token string">"/payment/consule"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>主启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsulConsumerOrderMain80</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsulConsumerOrderMain80<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来在运行测试了</p><p><img src="/2021/09/10/Consul/image-20210910211208152.png" alt="image-20210910211208152"></p><p>消费模块调用服务模块，这样就可以成功了 </p><p><img src="/2021/09/10/Consul/image-20210910211004960.png" alt="image-20210910211004960"></p><h2 id="Eureka、Zookeeper、Consul对比"><a href="#Eureka、Zookeeper、Consul对比" class="headerlink" title="Eureka、Zookeeper、Consul对比"></a>Eureka、Zookeeper、Consul对比</h2><p>CAP指的是什么？</p><pre><code>C：代表Consistency 强一致性A：Availablity 可用性P：Partition tolerance（分区容错性）经典的CAP图解    最多只能同时满足两个，    CAP核心理论：一个分布式系统不可能同时很好的满足一致性，可用性、和容错性这三个需求，所以根据CAP原理将NoSQL数据库分成了满足CA原则、满足AP原则和满足CP原则这三大类    CA - 单点集群，满足一致性，可用性的系统，通常在可扩展上性能不太强大    CP - 满足一致性，分区容错性的系统，通常对性能要求不是很高    AP - 满足可用性，分区容错性的系统，通常可能对一致性的要求低一点</code></pre><p><img src="/2021/09/10/Consul/image-20210910201954377.png" alt="image-20210910201954377"></p><p><img src="/2021/09/10/Consul/image-20210910201932839.png" alt="image-20210910201932839"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="consul" scheme="https://niuxiaocong.github.io/tags/consul/"/>
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Eureka</title>
    <link href="https://niuxiaocong.github.io/2021/09/10/Eureka/"/>
    <id>https://niuxiaocong.github.io/2021/09/10/Eureka/</id>
    <published>2021-09-10T02:39:59.000Z</published>
    <updated>2021-09-10T08:16:12.951Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>什么是服务分治？</p><pre><code>SpringCloud 封装了Netfilx公司开发的Eureka模块来实现服务分治    在传统的rpc远程调用的框架中，管理每一个服务于服务之间的依赖关系比较复杂，管理比较复杂，所以需要使用服务分治，管理服务于服务之间的依赖关系，可以实现服务的调用，负载均衡，容错，实现服务发现与注册</code></pre><p>Eureka中包含两个组件 分别是Eureka Server 和 Eureka Cilent</p><pre><code>Eureka Server 组件提供服务注册服务。    各个微服务节点通过配置启动以后，会在Eureka中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用的服务节点的信息，服务节点的信息可以在界面中直观的看到Eureka Client    是一个java客户端，用来简化Eureka Server的交互，客户端同时也具备一个内置的，使用轮询（round-robin）负载算法的负载均衡器。在应用启动以后，将会向Eureka Server发送心跳（默认的周期是30秒），如果Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server就会将这个服务节点从注册中心移除掉（默认为90秒）</code></pre><p>什么是服务注册和发现？</p><pre><code>    Eureka采用了c/s架构设计Eureka Server作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到Eureka Serve并维持心跳链接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。    在服务注册和发现中，有一个注册中心，当服务器启动的时候，会把当前自己服务器的信息，例如：服务通信地址等以别名方式注册到注册中心上，另一方面（消费者|服务提供者），以别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地的RPC调用RPC远程调用框架核心设计思想，在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系（服务治理概念），在任何rpc远程框架中，都会有一个注册中心（存放服务地址相关信息（接口地址））</code></pre><p><img src="/2021/09/10/Eureka/image-20210910104407752.png" alt="image-20210910104407752"></p><h2 id="Eureka服务端安装"><a href="#Eureka服务端安装" class="headerlink" title="Eureka服务端安装"></a>Eureka服务端安装</h2><p>新建模块cloud-eureka-server7001</p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Eureka的服务端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>yml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment" spellcheck="true">#eureka 服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#false 表示不向注册中心注册自己</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true">#false 表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索事务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost/db2019<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver</code></pre><p>启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span>            <span class="token comment" spellcheck="true">//在这里需要使用@EnableEurekaServer用来发现服务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaMain7001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaMain7001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动测试</p><p>可以看到如下页面就算成功了</p><p><img src="/2021/09/10/Eureka/image-20210910125201777.png" alt="image-20210910125201777"></p><h2 id="支付模块入驻Eureka"><a href="#支付模块入驻Eureka" class="headerlink" title="支付模块入驻Eureka"></a>支付模块入驻Eureka</h2><p>在cloud-provider-payment8001模块中的pom.xml中添加如下内容</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--Eureka 客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>修改.yml配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#是否要将自己入驻到EurekaServer 默认为 true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#是否从EurekaServer抓取已有的注册信息，默认为true，单节点无所谓，集群必须设置ture才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka</code></pre><p>在主启动上添加注解@EnableEurekaClient</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PaymentMain8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动测试</p><p>看到如下内容就成功了</p><p><img src="/2021/09/10/Eureka/image-20210910130318199.png" alt="image-20210910130318199"></p><h2 id="消费模块入驻Eureka"><a href="#消费模块入驻Eureka" class="headerlink" title="消费模块入驻Eureka"></a>消费模块入驻Eureka</h2><p>操作步骤和支付模块一致，所以就不写了</p><h2 id="Eureka集群原理"><a href="#Eureka集群原理" class="headerlink" title="Eureka集群原理"></a>Eureka集群原理</h2><p><img src="/2021/09/10/Eureka/image-20210910131114307.png" alt="image-20210910131114307"></p><h2 id="Eureka集群环境搭建"><a href="#Eureka集群环境搭建" class="headerlink" title="Eureka集群环境搭建"></a>Eureka集群环境搭建</h2><p>Eureka集群搭建它是一个互相注册，相互守望的结构</p><p><img src="/2021/09/10/Eureka/image-20210910133623594.png" alt="image-20210910133623594"></p><p>修改系统文件hosts文件配置</p><p><img src="/2021/09/10/Eureka/image-20210910133238587.png" alt="image-20210910133238587"></p><p>新建一个cloud-eureka-server7002模块</p><p>pom.xml 同 cloud-eureka-server7001模块</p><p>cloud-eureka-server7002的yml配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7002</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7002.com <span class="token comment" spellcheck="true">#eureka 服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#false 表示不向注册中心注册自己</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true">#false 表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索事务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/</code></pre><p>cloud-eureka-server7002的启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaMain7002</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaMain7002<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>cloud-eureka-server7001的yml 配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001.com <span class="token comment" spellcheck="true">#eureka 服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#false 表示不向注册中心注册自己</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true">#false 表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索事务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/</code></pre><p>测试运行</p><p><img src="/2021/09/10/Eureka/image-20210910134054176.png" alt="image-20210910134054176"></p><p><img src="/2021/09/10/Eureka/image-20210910134112613.png" alt="image-20210910134112613"></p><p>支付模块和消费模块分别入驻cloud-eureka-server7001 和 cloud-eureka-server7002</p><p>只需要修改cloud-eureka-server7001 和 cloud-eureka-server7002以下配置即可</p><p><img src="/2021/09/10/Eureka/image-20210910134607542.png" alt="image-20210910134607542"></p><p>运行测试</p><p><img src="/2021/09/10/Eureka/image-20210910134820292.png" alt="image-20210910134820292"></p><p><img src="/2021/09/10/Eureka/image-20210910134831771.png" alt="image-20210910134831771"></p><h2 id="支付模块的集群配置"><a href="#支付模块的集群配置" class="headerlink" title="支付模块的集群配置"></a>支付模块的集群配置</h2><p>创建cloud-provider-payment8002模块</p><p>pom.xml 和 cloud-provider-payment8001模块一样</p><p>cloud-provider-payment8002的 yml配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8002</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost/db2019<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#是否要将自己入驻到EurekaServer 默认为 true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#是否从EurekaServer抓取已有的注册信息，默认为true，单节点无所谓，集群必须设置ture才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#defaultZone: http://localhost:7001/eureka  单机版</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/</code></pre><p>剩下的Copycloud-provider-payment8001就可以了</p><p>cloud-provider-payment8002的主启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayMentMain8002</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PayMentMain8002<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动测试</p><p>能够看到如下的结果就证明支付服务的集群就搭建完毕了</p><p><img src="/2021/09/10/Eureka/image-20210910143209539.png" alt="image-20210910143209539"></p><p><img src="/2021/09/10/Eureka/image-20210910143157038.png" alt="image-20210910143157038"></p><p>在这里如果想要实现各个集群的访问的话，还需要做以下配置</p><p><img src="/2021/09/10/Eureka/image-20210910143421427.png" alt="image-20210910143421427"></p><p><img src="/2021/09/10/Eureka/image-20210910143523425.png" alt="image-20210910143523425"></p><h2 id="Eureka服务发现"><a href="#Eureka服务发现" class="headerlink" title="Eureka服务发现"></a>Eureka服务发现</h2><p><img src="/2021/09/10/Eureka/image-20210910145759987.png" alt="image-20210910145759987"></p><p><img src="/2021/09/10/Eureka/image-20210910150105839.png" alt="image-20210910150105839"></p><p><img src="/2021/09/10/Eureka/image-20210910150203862.png" alt="image-20210910150203862"></p><h2 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h2><pre><code>    概述：保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护，一旦进入了保护模式Eureka Server 将会尝试保护其服务注册表中的信息，不在删除服务注册表中的数据，也就是不会注销任何微服务，一句话总结概括，某市某刻一个微服务不可用了，Eureka不会立即清理，依旧会对该微服务的信息进行保存</code></pre><p>看到如下的这句话，就代表的了Eureka进入了保护模式</p><p><img src="/2021/09/10/Eureka/image-20210910150430129.png" alt="image-20210910150430129"></p><p><img src="/2021/09/10/Eureka/image-20210910151054528.png" alt="image-20210910151054528"></p><p><img src="/2021/09/10/Eureka/image-20210910151133406.png" alt="image-20210910151133406"></p><p><img src="/2021/09/10/Eureka/image-20210910151149521.png" alt="image-20210910151149521"></p><h2 id="关闭Eureka的自我保护机制"><a href="#关闭Eureka的自我保护机制" class="headerlink" title="关闭Eureka的自我保护机制"></a>关闭Eureka的自我保护机制</h2><p>Eureka服务端的配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7003.com <span class="token comment" spellcheck="true">#eureka 服务端的实例名称</span>    <span class="token comment" spellcheck="true">#hostname: localhost</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#false 表示不向注册中心注册自己</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true">#false 表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索事务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7003.com<span class="token punctuation">:</span>7003/eureka/    <span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#默认是true 开启自我保护模式</span>      <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">2000 </span><span class="token comment" spellcheck="true">#单位毫秒</span></code></pre><p>启动服务端会看到如下内容，已经关闭自我保护机制</p><p><img src="/2021/09/10/Eureka/image-20210910161124662.png" alt="image-20210910161124662"></p><p>Eureka客户端的配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#是否要将自己入驻到EurekaServer 默认为 true</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment" spellcheck="true">#是否从EurekaServer抓取已有的注册信息，默认为true，单节点无所谓，集群必须设置ture才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7003/eureka  <span class="token comment" spellcheck="true">#单机版</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true">#显示ip</span>    <span class="token comment" spellcheck="true">#Eureka 客户端向服务端发送心跳的时间间隔，默认是30秒</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#Eureka 服务器端在收到最后一次心跳后等待时间上限，默认是90秒，超时就会删除</span>    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> payment8003</code></pre><p>接下来如果一个服务停掉的话，Eureka会立刻将这个服务剔除掉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://niuxiaocong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Eureka" scheme="https://niuxiaocong.github.io/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>es新语法</title>
    <link href="https://niuxiaocong.github.io/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/"/>
    <id>https://niuxiaocong.github.io/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/</id>
    <published>2021-09-07T11:15:48.000Z</published>
    <updated>2021-09-09T12:04:11.632Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ES6新语法"><a href="#ES6新语法" class="headerlink" title="ES6新语法"></a>ES6新语法</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>let的特性</p><p>特性1：使用let声明的变量不可以重复的声明</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907193204236.png" alt="image-20210907193204236"></p><p>特性2：块级作用域</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token punctuation">{</span>            <span class="token keyword">let</span> girl <span class="token operator">=</span> <span class="token string">"girl"</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907193412014.png" alt="image-20210907193412014"></p><p>特性三：不存在变量的提升</p><pre class=" language-javascript"><code class="language-javascript">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span>         <span class="token keyword">let</span> song <span class="token operator">=</span> <span class="token string">"大帅哥"</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907193549266.png" alt="image-20210907193549266"></p><p>特性四：不影响作用域链</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token punctuation">{</span>            <span class="token keyword">let</span> school <span class="token operator">=</span> <span class="token string">'牛小牛'</span>            <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907193827050.png" alt="image-20210907193827050"></p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const的特性</p><p>const特性一：一定要赋初值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> A</code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907194907800.png" alt="image-20210907194907800"></p><p>const特性二：一般常量用名大写(规范)，当然小写也可以</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1000</span></code></pre><p>const特性三：常量的值不能修改</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token number">1000</span>A <span class="token operator">=</span> <span class="token number">2000</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907195039991.png" alt="image-20210907195039991"></p><p>const特性四：块级作用域</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token punctuation">{</span>            <span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token number">1000</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907195249383.png" alt="image-20210907195249383"></p><p>const特性五：对数组或者对象的元素修改，不会报错</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> TEAM <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'h1'</span><span class="token punctuation">,</span><span class="token string">'h2'</span><span class="token punctuation">,</span><span class="token string">'h3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        TEAM<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'h4'</span><span class="token punctuation">)</span></code></pre><p>const特性六：不能重复定义</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907195148694.png" alt="image-20210907195148694"></p><h3 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h3><h4 id="数组的结构赋值"><a href="#数组的结构赋值" class="headerlink" title="数组的结构赋值"></a>数组的结构赋值</h4><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> F4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小沈阳'</span><span class="token punctuation">,</span><span class="token string">'刘能'</span><span class="token punctuation">,</span><span class="token string">'赵四'</span><span class="token punctuation">,</span><span class="token string">'宋小宝'</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> <span class="token punctuation">[</span>xiao<span class="token punctuation">,</span>liu<span class="token punctuation">,</span>zhao<span class="token punctuation">,</span>si<span class="token punctuation">]</span> <span class="token operator">=</span> F4        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiao<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>liu<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhao<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907195812955.png" alt="image-20210907195812955"></p><h4 id="对象的结构赋值"><a href="#对象的结构赋值" class="headerlink" title="对象的结构赋值"></a>对象的结构赋值</h4><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> zhao <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'赵本仙人'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>            xiaopin<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"演小品"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>xiaopin<span class="token punctuation">}</span> <span class="token operator">=</span> zhao<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaopin<span class="token punctuation">)</span>        <span class="token function">xiaopin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907200401122.png" alt="image-20210907200401122"></p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>模板字符串的使用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`我是一个字符串`</span></span></code></pre><p>模板字符串的变量拼接</p><pre><code>let str1 = &quot;hello&quot;let str2 = `$&#123;str1&#125; world`</code></pre><p>模板字符串中可以直接出现换行</p><pre><code>let str1 = `&lt;ul&gt;                &lt;li&gt;牛1&lt;li&gt;                &lt;li&gt;牛2&lt;li&gt;                &lt;li&gt;牛3&lt;li&gt;           &lt;/ul&gt;`</code></pre><h3 id="对象的简写"><a href="#对象的简写" class="headerlink" title="对象的简写"></a>对象的简写</h3><p>es6允许在大括号里面直接写入变量和函数，作为对象的属性和方法</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"牛小牛"</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> change <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你是一头熊"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">,</span>            change<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span></code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token operator">+</span>b        <span class="token punctuation">}</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>使用箭头函数和之前有什么不同的地方</p><ol><li><p>this是静态的，this始终指向函数声明时所在作用域下的this的值</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> getName2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"牛小牛"</span>        <span class="token keyword">const</span> school <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">"tsxy"</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//直接调用</span>        <span class="token comment" spellcheck="true">//getName()</span>        <span class="token comment" spellcheck="true">//getName2()</span>        <span class="token comment" spellcheck="true">//call方法调用</span>        getName<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span>        getName2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907203618086.png" alt="image-20210907203618086"></p></li><li><p>箭头函数不能被实例化</p><pre><code>        //构造函数不能实例化对象        let Person = (name,age) =&gt;&#123;            this.name = name;            this.age = age;        &#125;        let me = new Person(&quot;xiao&quot;,30)        console.log(me)</code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907203529589.png" alt="image-20210907203529589"></p></li><li><p>不能使用arguments 变量</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907203946686.png" alt="image-20210907203946686"></p></li><li><p>简写的箭头函数</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//省略圆括号，如果只用一个参数的时候，圆括号可以省略</span> <span class="token keyword">let</span> add <span class="token operator">=</span> n<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token operator">+</span>n<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//省略花括号，如果只用一条语句的时候，花括号省略，return 省略</span> <span class="token keyword">let</span> pow <span class="token operator">=</span> n<span class="token operator">=</span><span class="token operator">></span> n<span class="token operator">*</span>n</code></pre><p>箭头函数适合于this无关的回调，定时器、数组的方法回调</p><p>箭头函数不适合于this有关的回调，事件回调，对象的方法</p></li></ol><h3 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h3><p>形参初始值，具有默认的值的参数，一般位置要靠后(潜规则)，如果不赋值默认是undefined</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//1.形参初始值，具有默认的值的参数，一般位置要靠后(潜规则)，如果不赋值默认是undefined</span>        <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c        <span class="token punctuation">}</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907210438363.png" alt="image-20210907210438363"></p><p>与解构赋值结合</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//2.与结构赋值结合</span>        <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>host<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>port<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>            username<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>            password<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>            port<span class="token punctuation">:</span> <span class="token number">3306</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907210939865.png" alt="image-20210907210939865"></p><h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>ES6引入了rest参数，用于获取函数的实参用来代替arguments</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//es5的写法</span>        <span class="token keyword">function</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"白芷"</span><span class="token punctuation">,</span><span class="token string">"枸杞"</span><span class="token punctuation">,</span><span class="token string">"人参"</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907211324107.png" alt="image-20210907211324107"></p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//es6中的写法</span>        <span class="token keyword">function</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"白芷"</span><span class="token punctuation">,</span><span class="token string">"枸杞"</span><span class="token punctuation">,</span><span class="token string">"人参"</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907211604302.png" alt="image-20210907211604302"></p><p>rest参数必须要放到参数的最后</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907211802910.png" alt="image-20210907211802910"></p><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> animal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小狗'</span><span class="token punctuation">,</span><span class="token string">'小猫'</span><span class="token punctuation">,</span><span class="token string">'小猪'</span><span class="token punctuation">,</span><span class="token string">'小羊'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">ttpe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>·            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">ttpe</span><span class="token punctuation">(</span><span class="token operator">...</span>animal<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907212256029.png" alt="image-20210907212256029"></p><p>合并数组</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'s1'</span><span class="token punctuation">,</span><span class="token string">'s2'</span><span class="token punctuation">]</span>        <span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'s3'</span><span class="token punctuation">,</span><span class="token string">'s4'</span><span class="token punctuation">]</span>        <span class="token keyword">const</span> hebing <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str1<span class="token punctuation">,</span><span class="token operator">...</span>str2<span class="token punctuation">]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hebing<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907224805890.png" alt="image-20210907224805890"></p><p>数组的克隆</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">]</span>        <span class="token keyword">const</span> strNew <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strNew<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907225129203.png" alt="image-20210907225129203"></p><p>将伪数组转换成真正的数组</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> divArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>divs<span class="token punctuation">]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divArr<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210907225319898.png" alt="image-20210907225319898"> </p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">/**         *    新的数据类型 symbol         * 第七种数据类型 symbol 表示第一无二的         *  symbol数据类型的特点         *      特点1：使用symbol定义的值是唯一的，用来解决命名冲突的问题         *      特点2：symbol值不能和其他数据类型进行运算         *      特点3：symbol的类型不能使用for...in进行循环便利，但是可以使用Reflect.ownKeys来获取对象的所有键名         */</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token keyword">typeof</span> s<span class="token punctuation">)</span>        <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"牛小牛"</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"牛小牛"</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">,</span><span class="token keyword">typeof</span> s1<span class="token punctuation">,</span><span class="token keyword">typeof</span> s2<span class="token punctuation">)</span>        <span class="token keyword">let</span> s3 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">"牛小牛"</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">"牛小牛"</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span>s4<span class="token punctuation">,</span>s3<span class="token operator">===</span>s4<span class="token punctuation">,</span><span class="token keyword">typeof</span> s1<span class="token punctuation">,</span><span class="token keyword">typeof</span> s2<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210908085941270.png" alt="image-20210908085941270"></p><h4 id="symbol应用场景"><a href="#symbol应用场景" class="headerlink" title="symbol应用场景"></a>symbol应用场景</h4><p>给对象添加属性或者方法</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">let</span> youxi <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">"y阴阳师"</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"say"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我叫姑获鸟"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我可以杀敌"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>youxi<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210908090901576.png" alt="image-20210908090901576"></p><h4 id="symbol的内置值（跳过）"><a href="#symbol的内置值（跳过）" class="headerlink" title="symbol的内置值（跳过）"></a>symbol的内置值（跳过）</h4><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>可以进行迭代的内容，Array、Arguments、Set、Map、String、TypedArray、NodeList</p><p>迭代器的工作原理</p><p>​    创建一个指针对象，指向当前数据结构的起始位置</p><p>​    第一次调用对象的next方法，指针自动指向数据结构的第一个成员</p><p>​    接下来不断的调用next方法，指针不停的向后面移动，一直移动到最后一个成员</p><p>​    每一次调用next方法返回一个包含value和done属性的对象</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> xiyou <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'金角大王'</span><span class="token punctuation">,</span><span class="token string">'银角大王'</span><span class="token punctuation">,</span><span class="token string">'铁角大王'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> iterator <span class="token operator">=</span> xiyou<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210908100614475.png" alt="image-20210908100614475"></p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> lishi <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'终极三国'</span><span class="token punctuation">,</span>            stus<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">'关羽'</span><span class="token punctuation">,</span><span class="token string">'张飞'</span><span class="token punctuation">,</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token string">'马超'</span><span class="token punctuation">,</span><span class="token string">'黄忠'</span><span class="token punctuation">,</span><span class="token string">'曹操'</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//索引变量</span>                <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token keyword">return</span><span class="token punctuation">{</span>                    next<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> _this<span class="token punctuation">.</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span>_this<span class="token punctuation">.</span>stus<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>done<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>                            index<span class="token operator">++</span>                            <span class="token keyword">return</span> result                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>done<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> lishi<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210908102736872.png" alt="image-20210908102736872"></p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//生成器其实就是一个特殊的函数</span>        <span class="token comment" spellcheck="true">//异步变成，纯回调函数 node fs ajax mongodb</span>        <span class="token keyword">function</span>  <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello Gengerator'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//只有调用next方法才会执行</span>        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">          <span class="token comment" spellcheck="true">/*            生成器其实就是一个特殊的函数            异步编程、纯回调函数、node、fs、ajax、mongdb            函数代码的分离          */</span>        <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">yield</span> <span class="token string">'一只小白兔'</span>   <span class="token comment" spellcheck="true">//yield 可以充当代码的分隔符</span>            <span class="token keyword">yield</span> <span class="token string">'一只大灰狼'</span>                        <span class="token keyword">yield</span> <span class="token string">'一只大胖猪'</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span>  iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210908104149680.png" alt="image-20210908104149680"></p><p>生成器函数实例1</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>                iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>                iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span>                iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">yield</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">yield</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">yield</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>生成器函数实例2</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">'用户数据'</span>                <span class="token comment" spellcheck="true">//调用next方法，并且将数据传入</span>                iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">'订单数据'</span>                iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">'商品数据'</span>                iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>            <span class="token keyword">let</span> orders <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span>            <span class="token keyword">let</span> goods <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用生成器函数</span>        <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise基本使用"><a href="#Promise基本使用" class="headerlink" title="Promise基本使用"></a>Promise基本使用</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//实例化 Promise 对象</span>        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//let data = '数据库中的数据'</span>                <span class="token comment" spellcheck="true">//resolve(data)</span>                <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">'数据读取失败'</span>                <span class="token function">reject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Promise封装读取文件"><a href="#Promise封装读取文件" class="headerlink" title="Promise封装读取文件"></a>Promise封装读取文件</h3><p>原始的读取方式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.引入fs模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.调用方法读取文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resourse/为学.md'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果失败，抛出错误</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err    <span class="token comment" spellcheck="true">//如果没有错，则输出内容</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>使用Promise封装</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.引入fs模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.使用Promise进行封装</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resourse/为学.md'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//失败</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//成功</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Promise封装AJAX"><a href="#Promise封装AJAX" class="headerlink" title="Promise封装AJAX"></a>Promise封装AJAX</h3><p>原生的AJAX</p><p>这个接口已经过时了，访问不到，可以自己写一个接口即可使用</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//1.创建对象</span>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.初始化</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"https://api/apiopen.top/getJoke"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//3.发送</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//4.绑定事件，处理相应的结果</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断响应码，200 ~ 300 之间的都算成功</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">>=</span><span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//表示成功</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//失败</span>                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>使用Promise封装以后的AJAX</p><pre class=" language-javascript"><code class="language-javascript">       <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//1.创建对象</span>           <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//2.初始化</span>           xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"https://api/apiopen.top/getJoke"</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//3.发送</span>           xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//4.绑定事件，处理相应的结果</span>           xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//判断</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">//判断响应码，200 ~ 300 之间的都算成功</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">>=</span><span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">//表示成功</span>                       <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>                   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">//失败</span>                       <span class="token function">reject</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then"></a>Promise.prototype.then</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'用户数据'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//then方法返回的结果也是一个Promise对象，对象的状态是由回调函数的执行结果决定的</span>        <span class="token comment" spellcheck="true">//1.如果回调函数中返回的结果是非Promise类型的属性，状态为成功，返回值为对象的成功的值</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.返回的是非promise的对象</span>            <span class="token comment" spellcheck="true">//console.log(value)</span>            <span class="token comment" spellcheck="true">//return 123</span>            <span class="token comment" spellcheck="true">//2.返回的是Promise对象</span>            <span class="token comment" spellcheck="true">//return new Promise((resolve, reject) => {</span>                <span class="token comment" spellcheck="true">//resolve('ok')</span>                <span class="token comment" spellcheck="true">//reject('error ')</span>            <span class="token comment" spellcheck="true">//})</span>            <span class="token comment" spellcheck="true">//3.抛出错误</span>            <span class="token keyword">throw</span> <span class="token string">'出错啦'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="Promise实践练习，读取多个文件"><a href="#Promise实践练习，读取多个文件" class="headerlink" title="Promise实践练习，读取多个文件"></a>Promise实践练习，读取多个文件</h3><p>原生实现</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.引入fs模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.读取文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resourse/为学.md'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resourse/插秧诗.md'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resourse/观书有感.md'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data3<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token template-string"><span class="token string">`                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data3<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            `</span></span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>使用Promise进行封装</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./resourse/为学.md"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resourse/插秧诗.md'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span>value<span class="token punctuation">,</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resourse/观书有感.md'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>           value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错啦'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>reason <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//声明set集合</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'牛一'</span><span class="token punctuation">,</span><span class="token string">'牛二'</span><span class="token punctuation">,</span><span class="token string">'牛三'</span><span class="token punctuation">,</span><span class="token string">'牛四'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>相关方法</p><p>元素的个数</p><pre class=" language-javascript"><code class="language-javascript">s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>添加元素</p><pre class=" language-javascript"><code class="language-javascript">s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'牛五 '</span><span class="token punctuation">)</span></code></pre><p>删除元素</p><pre class=" language-javascript"><code class="language-javascript">s2<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'牛四'</span><span class="token punctuation">)</span></code></pre><p>检测</p><pre class=" language-javascript"><code class="language-javascript">s2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'牛二'</span><span class="token punctuation">)</span></code></pre><p>清空集合</p><pre class=" language-javascript"><code class="language-javascript">s2<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>集合的迭代</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p>Map集合是一对映射有它自己的Key和Value，它的键和值可以是任意数据类型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.声明Map</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>添加元素set(k,v)</p><pre class=" language-javascript"><code class="language-javascript">m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'牛小牛'</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'牛小牛发言'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>查看元素个数</p><pre class=" language-javascript"><code class="language-javascript">m<span class="token punctuation">.</span>size</code></pre><p>删除元素的个数delete(k)</p><pre class=" language-javascript"><code class="language-javascript">m<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span></code></pre><p>元素的获取get(k)</p><pre class=" language-javascript"><code class="language-javascript">m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span></code></pre><p>清空Map集合中的元素clear()</p><pre><code>m.clear()</code></pre><p>遍历Map集合</p><pre><code>for(let v of m)&#123;    console.log(v)&#125;</code></pre><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>ES5对象实例化的方式</p><pre class=" language-javascript"><code class="language-javascript">       <span class="token comment" spellcheck="true">//ES5中实例化对象的方式</span>        <span class="token keyword">function</span> <span class="token function">Phone</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand            <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price        <span class="token punctuation">}</span>        Phone<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是可以打电话的"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//实例化对象</span>        <span class="token keyword">let</span> HuaWei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">'华为'</span><span class="token punctuation">,</span><span class="token number">5999</span><span class="token punctuation">)</span>        HuaWei<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>HuaWei<span class="token punctuation">)</span></code></pre><p>ES6对象实例化的方式</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//ES6中实例化对象</span>        <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//必须使用constructor方法，名称不可以修改</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand                <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//声明方法的格式必须使用这种格式 方法名(){}</span>            <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我可以打电话"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> XiaoMi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">'小米'</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>XiaoMi<span class="token punctuation">)</span></code></pre><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>在这里验证了一点，被static标注的方法是属于类的，而不属于实例对象</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>            <span class="token keyword">static</span> name <span class="token operator">=</span> <span class="token string">'手机'</span>            <span class="token keyword">static</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以毁灭世界'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> SanXing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SanXing<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Phone<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909093453005.png" alt="image-20210909093453005"></p><h3 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h3><p>ES5中的对象继承</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//手机</span>        <span class="token keyword">function</span> <span class="token function">Phone</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand            <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price        <span class="token punctuation">}</span>        Phone<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我可以打电话"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">SmartPhone</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">,</span>color<span class="token punctuation">,</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置子级构造函数的原型</span>        SmartPhone<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        SmartPhone<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SmartPhone        SmartPhone<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>photo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以拍照'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        SmartPhone<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>playGame <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以玩游戏'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> DaGeDa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartPhone</span><span class="token punctuation">(</span><span class="token string">'大哥大'</span><span class="token punctuation">,</span><span class="token string">'2488'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'5.5incj'</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>DaGeDa<span class="token punctuation">)</span></code></pre><p>ES6中的对象继承</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//es6实现继承</span>        <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//构造方法</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand                <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//父类的成员属性</span>            <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'手机可以打电话'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">class</span> <span class="token class-name">SmartPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">,</span>color<span class="token punctuation">,</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color                <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size            <span class="token punctuation">}</span>            <span class="token function">photo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"可以拍照"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可以玩游戏'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> XixoMi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartPhone</span><span class="token punctuation">(</span><span class="token string">'小米'</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'4.7inch'</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>XixoMi<span class="token punctuation">)</span></code></pre><h3 id="子类对父类方法的重写"><a href="#子类对父类方法的重写" class="headerlink" title="子类对父类方法的重写"></a>子类对父类方法的重写</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//es6实现继承</span>    <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造方法</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand            <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//父类的成员属性</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'手机可以打电话'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">SmartPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">,</span>color<span class="token punctuation">,</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color            <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size        <span class="token punctuation">}</span>        <span class="token function">photo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"可以拍照"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可以玩游戏'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//重写父类中的call方法</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'手机可以打视频电话'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> XixoMi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartPhone</span><span class="token punctuation">(</span><span class="token string">'小米'</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'4.7inch'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>XixoMi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//重写以后的方法就不能直接在使用父类中的方法了</span>    XixoMi<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Class中的get和set"><a href="#Class中的get和set" class="headerlink" title="Class中的get和set"></a>Class中的get和set</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>            <span class="token keyword">get</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"价格属性被读取了"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token string">'I Love You'</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token function">price</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'价格属性被修改了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>price        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        s<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10000</span></code></pre><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>模块化的优点：防止命名冲突、代码复用、提高维护性</p><p>模块化规范的产品：</p><p>​    CommonJS  ——-&gt;  nodeJs、Browserify</p><p>​    AMD    ———-&gt; requireJS</p><p>​    CMD    ———-&gt; seaJS</p><h3 id="模块化语法"><a href="#模块化语法" class="headerlink" title="模块化语法"></a>模块化语法</h3><p>主要是由两个命令构成：export和import</p><p>export 命令用于规定模块的对外接口</p><p>import 命令用于输入其他模块提供的功能</p><h3 id="如何引用暴露"><a href="#如何引用暴露" class="headerlink" title="如何引用暴露"></a>如何引用暴露</h3><h4 id="暴露方式"><a href="#暴露方式" class="headerlink" title="暴露方式"></a>暴露方式</h4><p>暴露方式一</p><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909140040555.png" alt="image-20210909140040555"></p><p>请使用vsCode的liveServer插件打开</p><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909140116806.png" alt="image-20210909140116806"></p><p>暴露方式二</p><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909140702332.png" alt="image-20210909140702332"></p><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909140717224.png" alt="image-20210909140717224"></p><p>暴露方式三</p><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909141128541.png" alt="image-20210909141128541"></p><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909141138481.png" alt="image-20210909141138481"></p><h4 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h4><p>引用方式一</p><pre><code>import * as 别名 from &quot;模块路径&quot;;</code></pre><p>引用方式二</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//解构赋值</span>        <span class="token keyword">import</span> <span class="token punctuation">{</span>school<span class="token punctuation">,</span>teach<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./m1.js"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>teach<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909142037027.png" alt="image-20210909142037027"></p><p>引用方式三</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//简便的暴露方式，只能针对默认暴露</span><span class="token keyword">import</span> m3 <span class="token keyword">from</span> <span class="token string">"./m3.js"</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909142507495.png" alt="image-20210909142507495"></p><p>模块化方式二</p><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909144222676.png" alt="image-20210909144222676"></p><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909144234216.png" alt="image-20210909144234216"></p><h2 id="Babel对ES6模块化代码转换"><a href="#Babel对ES6模块化代码转换" class="headerlink" title="Babel对ES6模块化代码转换"></a>Babel对ES6模块化代码转换</h2><p>需要先安装三个插件分别是babel-cli babel-preset-env browserify</p><pre><code>npm i babel-cli babel-preset-env browserify -D</code></pre><h2 id="ES7新特性"><a href="#ES7新特性" class="headerlink" title="ES7新特性"></a>ES7新特性</h2><p>Array.prototype.includes</p><p>用来检测数组中是否包含某个元素，返回布尔类型值</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">let</span> anminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'阿牛'</span><span class="token punctuation">,</span><span class="token string">'阿毛'</span><span class="token punctuation">,</span><span class="token string">'阿狗'</span><span class="token punctuation">,</span><span class="token string">'阿雄'</span><span class="token punctuation">]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anminal<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'阿牛'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anminal<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'阿朱'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//false</span></code></pre><p>指数操作符</p><p>ES7中添加了指数操作符[**]，用来实现幂运算，功能和Math.pow结果相同</p><pre class=" language-javascript"><code class="language-javascript">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">)</span></code></pre><h2 id="ES8新特性"><a href="#ES8新特性" class="headerlink" title="ES8新特性"></a>ES8新特性</h2><h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h3><p>async和await两种语法结合可以让异步代码像同步代码一样</p><h4 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h4><p>async 函数的返回值为Promise对象</p><p>promise对象的结果由async函数执行的返回值决定</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//返回一个字符串</span>            <span class="token comment" spellcheck="true">//return '牛小牛'</span>            <span class="token comment" spellcheck="true">//返回的结果不是一个Promise类型的对象，返回的结果就是成功的Promise对象</span>            <span class="token comment" spellcheck="true">//return;</span>            <span class="token comment" spellcheck="true">//抛出错误，返回的结果是一个失败的Promise</span>            <span class="token comment" spellcheck="true">//throw new Error('出错了')</span>            <span class="token comment" spellcheck="true">//返回的结果如果是一个Promise对象</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//resolve("成功的数据")</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的数据'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h4 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h4><p>await必须卸载async函数中</p><p>await右侧的表达式一般为Promise对象</p><p>await返回的是promise成功的值</p><p>await的promise失败了，会抛出异常，并且通过try…catch进行捕获处理</p><p>例子</p><p>发送成功</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//创建Promise对象</span>        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//成功</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的数据'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909170933770.png" alt="image-20210909170933770"></p><p>发送失败</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//创建Promise对象</span>        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//失败</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的数据'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909171135408.png" alt="image-20210909171135408"></p><h4 id="async和await的结合使用读取文件"><a href="#async和await的结合使用读取文件" class="headerlink" title="async和await的结合使用读取文件"></a>async和await的结合使用读取文件</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.引入 fs模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">readWeiXue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./resourse/为学.md"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//失败</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//成功</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">readChangYangShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./resourse/插秧诗.md"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//失败</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//成功</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">readYouGan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./resourse/观书有感.md"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//失败</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//成功</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明一个async函数</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> weixue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readWeiXue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> changyang <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readChangYangShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> guanshu <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readYouGan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weixue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>changyang<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>guanshu<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="async和await的结合发送AJAX请求"><a href="#async和await的结合发送AJAX请求" class="headerlink" title="async和await的结合发送AJAX请求"></a>async和await的结合发送AJAX请求</h4><pre class=" language-javascript"><code class="language-javascript">        <span class="token comment" spellcheck="true">//在这里借用的是Jquery的接口</span>        <span class="token keyword">function</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//创建Ajax对象</span>                <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//初始化</span>                x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//发送</span>                x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//绑定事件</span>                x<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>status<span class="token operator">>=</span><span class="token number">200</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>status<span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//成功啦</span>                            <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>response<span class="token punctuation">)</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//失败</span>                            <span class="token function">reject</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>status<span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//使用Promise测试</span>        <span class="token comment" spellcheck="true">/*sendAJAX("https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.4.1.min.js").then(value => {            console.log(value)        },reason => {            console.warn(reason)        })*/</span>        <span class="token comment" spellcheck="true">//使用async于await进行测试</span>        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span><span class="token string">"https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.4.1.min.js"</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909173836621.png" alt="image-20210909173836621"></p><h3 id="ES8中对象方法的扩展"><a href="#ES8中对象方法的扩展" class="headerlink" title="ES8中对象方法的扩展"></a>ES8中对象方法的扩展</h3><p>Object.values 和 Object.entries</p><p>1、Object.values() 方法返回一个给定对象的所有可枚举属性值的数组</p><p>2、Object.entries()方法返回一个给定对象自身可遍历属性[key,value]的数组</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> school <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'牛小聪'</span><span class="token punctuation">,</span>            cities<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'邢台'</span><span class="token punctuation">,</span><span class="token string">'邯郸'</span><span class="token punctuation">,</span><span class="token string">'唐山'</span><span class="token punctuation">,</span><span class="token string">'石家庄'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            aihao<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'吃饭'</span><span class="token punctuation">,</span><span class="token string">'睡觉'</span><span class="token punctuation">,</span><span class="token string">'写代码'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//Object.entries()方法返回一个给定对象自身可遍历属性[key,value]的数组</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//Object.values() 方法返回一个给定对象的所有可枚举属性值的数组</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Object.getOwnPropertyDescriptors</p><p>该方法返回指定对象所有自身属性的描述对象</p><h2 id="ES9新特性"><a href="#ES9新特性" class="headerlink" title="ES9新特性"></a>ES9新特性</h2><p>对象扩展</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">const</span> skilOne <span class="token operator">=</span> <span class="token punctuation">{</span>            q<span class="token punctuation">:</span> <span class="token string">'天音波'</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> skilTwo <span class="token operator">=</span> <span class="token punctuation">{</span>            w<span class="token punctuation">:</span> <span class="token string">'金钟罩'</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> skilThree <span class="token operator">=</span> <span class="token punctuation">{</span>            e<span class="token punctuation">:</span> <span class="token string">'天雷破'</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> skilFour <span class="token operator">=</span> <span class="token punctuation">{</span>            r<span class="token punctuation">:</span> <span class="token string">'猛龙摆尾'</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> mangseng <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>skilOne<span class="token punctuation">,</span><span class="token operator">...</span>skilTwo<span class="token punctuation">,</span><span class="token operator">...</span>skilThree<span class="token punctuation">,</span><span class="token operator">...</span>skilFour<span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mangseng<span class="token punctuation">)</span></code></pre><p><img src="/2021/09/07/es%E6%96%B0%E8%AF%AD%E6%B3%95/image-20210909195958264.png" alt="image-20210909195958264"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="javascrip" scheme="https://niuxiaocong.github.io/tags/javascrip/"/>
    
  </entry>
  
  <entry>
    <title>类加载机制</title>
    <link href="https://niuxiaocong.github.io/2021/09/07/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>https://niuxiaocong.github.io/2021/09/07/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</id>
    <published>2021-09-07T07:05:20.000Z</published>
    <updated>2021-09-07T11:13:36.016Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><p><img src="/2021/09/07/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20210907153855266.png" alt="image-20210907153855266"></p><p>类的加载机制从大体上可以分成三个阶段，分别是加载阶段，链接阶段以及初始化阶段</p><p>详细的阶段划分：加载阶段、（验证阶段、准备阶段、解析阶段）这个统称链接阶段、初始化阶段、使用阶段、卸载阶段</p><h2 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h2><h3 id="类加载器（ClassLoader）"><a href="#类加载器（ClassLoader）" class="headerlink" title="类加载器（ClassLoader）"></a>类加载器（ClassLoader）</h3><p>类加载器的分类：JVM支持两种类型的加载器，分别是引导类加载器和自定义类加载器，可以这么理解除了引导类加载器以外，所有派生的抽象类ClassLoader的类的加载器都划分成自定义加载类</p><p><img src="/2021/09/07/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20210907155727270.png" alt="image-20210907155727270"></p><h3 id="引导类加载器（BootstrapClassLoader）"><a href="#引导类加载器（BootstrapClassLoader）" class="headerlink" title="引导类加载器（BootstrapClassLoader）"></a>引导类加载器（BootstrapClassLoader）</h3><p>​    这个加载器是由c/c++实现的，在jvm内部</p><p>​    引导类加载器是负责加载Java的核心类库 lib文件夹下面的内容</p><p>​    引导类加载器没有父加载器，它没有继承java.lang.ClassLoader</p><h3 id="扩展类加载器-ExtClassLoader"><a href="#扩展类加载器-ExtClassLoader" class="headerlink" title="扩展类加载器(ExtClassLoader)"></a>扩展类加载器(ExtClassLoader)</h3><p>​    Java语言编写的 由sun.misc.Launcher$ExtClassLoader实现</p><p>​    负责加载lib 下面ext的子目录下面的内容</p><p>​    派生与classLoader类</p><h3 id="应用类加载器（AppClassLoader）"><a href="#应用类加载器（AppClassLoader）" class="headerlink" title="应用类加载器（AppClassLoader）"></a>应用类加载器（AppClassLoader）</h3><p>​    由sun.misc.Launcher$AppClassLoader</p><p>​    派生与classLoader类</p><p>​    上级的加载器为扩展类加载器</p><p>​    应用类加载器负责加载 classpath或者系统 java.class.path指定路径下的类库</p><p>​    应用类加载器是程序中默认的加载器，一般来说，java应用的类都是由它来完成</p><p>​    使用ClassLoader.getSystemClassLoader()来获取到这个应用类加载器</p><h3 id="自定义类加载器（）"><a href="#自定义类加载器（）" class="headerlink" title="自定义类加载器（）"></a>自定义类加载器（）</h3><p>   自定义类加载器的应用场景：隔离加载类、修改类加载的方式、扩展加载源、防止源码泄露</p><pre class=" language-java"><code class="language-java">        ClassLoader AppClassLoader <span class="token operator">=</span> ClassLoaderTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>AppClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//默认是使用AppClassLoader加载器进行加载的</span>        ClassLoader ExtClassLoader <span class="token operator">=</span> AppClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExtClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//AppClassLoader的父类加载器是ExtClassLoader</span>        ClassLoader parent <span class="token operator">=</span> ExtClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">//null 也就是我们的启动类加载器BootstrapClassLoader</span>        <span class="token comment" spellcheck="true">/*            执行结果                sun.misc.Launcher$AppClassLoader@18b4aac2                sun.misc.Launcher$ExtClassLoader@1540e19d                null        */</span></code></pre><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>Java虚拟机采用的是按需加载的方式，也就是说当需要使用该类时候才会将class文件加载内存生成class对象。而且加载某个类的class文件时，java虚拟机采用的就是双亲委派机制。</p><p>双亲委派执行的原理</p><p>​    如果一个类加载器收到了类加载的请求，它自己首先不会去加载，而是吧这个请求向上面进行一个委托，让他的父类加载器去执行。如果父类的加载器的上一级还存在父加载器它就会继续向上委托，一直委托到最后一个加载器，也就是引导类加载器。如果父类加载器可以完成类的加载任务，那么就成功返回，如果父类的加载器没有办法完成加载的任务，子类的加载器才会尝试着自己去加载</p><p><img src="/2021/09/07/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20210907160609307.png" alt="image-20210907160609307"></p><h2 id="双亲委派的好处"><a href="#双亲委派的好处" class="headerlink" title="双亲委派的好处"></a>双亲委派的好处</h2><p>避免了类的重复加载、沙箱安全机制，避免核心的API被篡改</p><h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p>防止我们自定义的类使用引导类加载器进行加载，保证核心API的安全</p><p>在JVM中表示两个class对象是否为同一个对象的两个必要条件</p><p>   类的完整类名必须要一致，包括包名</p><p>   这个加载类的ClassLoader（ClassLoader 实例对象）必须是相同的</p><h2 id="打破双亲委派机制"><a href="#打破双亲委派机制" class="headerlink" title="打破双亲委派机制"></a>打破双亲委派机制</h2><h2 id="链接阶段"><a href="#链接阶段" class="headerlink" title="链接阶段"></a>链接阶段</h2><h2 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java虚拟机" scheme="https://niuxiaocong.github.io/categories/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="jvm" scheme="https://niuxiaocong.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>mysql高级</title>
    <link href="https://niuxiaocong.github.io/2021/09/07/mysql%E9%AB%98%E7%BA%A7/"/>
    <id>https://niuxiaocong.github.io/2021/09/07/mysql%E9%AB%98%E7%BA%A7/</id>
    <published>2021-09-07T07:01:57.000Z</published>
    <updated>2021-09-07T07:01:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>svn</title>
    <link href="https://niuxiaocong.github.io/2021/09/06/svn/"/>
    <id>https://niuxiaocong.github.io/2021/09/06/svn/</id>
    <published>2021-09-06T11:42:02.000Z</published>
    <updated>2021-09-06T13:15:46.530Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SVN版本控制工具"><a href="#SVN版本控制工具" class="headerlink" title="SVN版本控制工具"></a>SVN版本控制工具</h1><h1 id="SVN的工作机制"><a href="#SVN的工作机制" class="headerlink" title="SVN的工作机制"></a>SVN的工作机制</h1><p><img src="/2021/09/06/svn/image-20210906194824479.png" alt="image-20210906194824479"></p><p>基本操作：</p><p>​    1、检出（Checkout）</p><p>​            把服务器端版本内容完整的下载到本地</p><p>​    2、更新（Update）</p><p>​            把服务器端相对于本地的新的修改下载到本地</p><p>​    3、 提交（Commit）</p><p>​            把本地修改上传到服务器</p><h1 id="服务器端环境搭建（Linux版本）"><a href="#服务器端环境搭建（Linux版本）" class="headerlink" title="服务器端环境搭建（Linux版本）"></a>服务器端环境搭建（Linux版本）</h1><p>搭建步骤</p><p>安装服务器端程序</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#执行如下命令</span>yum <span class="token function">install</span> subversion</code></pre><p>创建并配置版本库</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建版本库目录</span><span class="token function">mkdir</span> -p /var/svn/repository<span class="token comment" spellcheck="true">#在版本库目录下创建具体项目目录</span><span class="token function">mkdir</span> pro_oa<span class="token function">mkdir</span> pro_erp<span class="token comment" spellcheck="true">#创建SVN的版本库</span>svnadmin create /var/svn/repository/pro_oa/</code></pre><p><img src="/2021/09/06/svn/image-20210906201106286.png" alt="image-20210906201106286"></p><p>配置SVN对应的服务</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看服务列表</span>systemctl list-unit-files<span class="token comment" spellcheck="true">#查看svn的服务名</span>systemctl list-unit-files <span class="token operator">|</span> <span class="token function">grep</span> svn</code></pre><p>进入到/var/svn/repository/pro_oa/conf目录下</p><p><img src="/2021/09/06/svn/image-20210906210008106.png" alt="image-20210906210008106"></p><ol><li><p>设置可以访问这个远程仓库的人的帐号密码</p><p><img src="/2021/09/06/svn/image-20210906210208368.png" alt="image-20210906210208368"></p></li><li><p>设置权限控制</p></li></ol><ol start="3"><li><p>修改svnserve.conf文件</p><pre><code>anon-access=none          #匿名用户不可访问auth-access=write         #授权用户可写password-db=passwd        #使用哪个文件作为账号文件authz-db = authz          #使用哪个文件作为权限文件realm = /var/svn/repository/pro_oa/      #认证空间名，版本库所在目录</code></pre><p>svn的默认端口号是3690</p></li></ol><p>启动SVN服务</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#开启svn服务</span>systemctl start svnserve.service<span class="token comment" spellcheck="true">#设置开机自动启动</span>systemctl <span class="token function">enable</span> svnserve.service</code></pre><h1 id="命令行客户端"><a href="#命令行客户端" class="headerlink" title="命令行客户端"></a>命令行客户端</h1><p>创建两个工作目录模拟两个开发人员</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">mkdir</span> -p /root/workspace/harry <span class="token function">mkdir</span> -p /root/workspace/sally</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="版本控制工具" scheme="https://niuxiaocong.github.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="svn" scheme="https://niuxiaocong.github.io/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>泛型机制</title>
    <link href="https://niuxiaocong.github.io/2021/09/06/%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6/"/>
    <id>https://niuxiaocong.github.io/2021/09/06/%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6/</id>
    <published>2021-09-06T05:28:05.000Z</published>
    <updated>2021-09-09T00:14:29.850Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="泛型机制"><a href="#泛型机制" class="headerlink" title="泛型机制"></a>泛型机制</h1><p>泛型使用例子</p><pre class=" language-java"><code class="language-java">        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer score<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h1 id="自定义泛型结构"><a href="#自定义泛型结构" class="headerlink" title="自定义泛型结构"></a>自定义泛型结构</h1><h2 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//泛型类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    String orderName<span class="token punctuation">;</span>    <span class="token keyword">int</span> orderId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//类的内部就可以使用泛型了</span>    T orderT<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>String orderName<span class="token punctuation">,</span><span class="token keyword">int</span> orderId<span class="token punctuation">,</span>T orderT<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderName <span class="token operator">=</span> orderName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderT <span class="token operator">=</span> orderT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//泛型方法</span>    <span class="token keyword">public</span> T <span class="token function">getOrderT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//泛型方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderT</span><span class="token punctuation">(</span>T orderT<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderT <span class="token operator">=</span> orderT<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实例化指明泛型的类型</p><pre class=" language-java"><code class="language-java">  Order<span class="token operator">&lt;</span>String<span class="token operator">></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h2><h2 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h2><p>泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">copyFromArrayToList</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>E e<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>泛型方法，可以声明成静态的，原因是：泛型参数是在调用方法时候确定的，并非是在实例化时候确定</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">copyFromArrayToList</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>E e<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="声明泛型的时候需要注意以下几点"><a href="#声明泛型的时候需要注意以下几点" class="headerlink" title="声明泛型的时候需要注意以下几点"></a>声明泛型的时候需要注意以下几点</h1><p>1、静态方法不能使用类的泛型</p><p><img src="/2021/09/06/%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6/image-20210908163951094.png"></p><p>2、 异常类不能是泛型的</p><p><img src="/2021/09/06/%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6/image-20210908164049965.png" alt="image-20210908164049965"></p><p>3、声明泛型数组</p><p><img src="/2021/09/06/%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6/image-20210908164527845.png" alt="image-20210908164527845"></p><p>4、父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类不保留父类的泛型</span><span class="token comment" spellcheck="true">// 1)没有类型 擦除</span><span class="token keyword">class</span> <span class="token class-name">Son1</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 等价于class Son extends Father&lt;Object,Object>{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2)具体类型</span><span class="token keyword">class</span> <span class="token class-name">Son2</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类保留父类的泛型</span><span class="token comment" spellcheck="true">// 1)全部保留</span><span class="token keyword">class</span> <span class="token class-name">Son3</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2)部分保留</span><span class="token keyword">class</span> <span class="token class-name">Son4</span><span class="token operator">&lt;</span>T2<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类不保留父类的泛型</span><span class="token comment" spellcheck="true">// 1)没有类型 擦除</span><span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//等价于class Son extends Father&lt;Object,Object>{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2)具体类型</span><span class="token keyword">class</span> <span class="token class-name">Son2</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类保留父类的泛型</span><span class="token comment" spellcheck="true">// 1)全部保留</span><span class="token keyword">class</span> <span class="token class-name">Son3</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2)部分保留</span><span class="token keyword">class</span> <span class="token class-name">Son4</span><span class="token operator">&lt;</span>T2<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="https://niuxiaocong.github.io/categories/java/"/>
    
    
    <category term="泛型" scheme="https://niuxiaocong.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程</title>
    <link href="https://niuxiaocong.github.io/2021/09/06/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://niuxiaocong.github.io/2021/09/06/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-09-06T05:27:49.000Z</published>
    <updated>2021-09-06T05:27:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java集合</title>
    <link href="https://niuxiaocong.github.io/2021/09/06/java%E9%9B%86%E5%90%88/"/>
    <id>https://niuxiaocong.github.io/2021/09/06/java%E9%9B%86%E5%90%88/</id>
    <published>2021-09-06T05:27:23.000Z</published>
    <updated>2021-09-06T05:27:23.939Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java反射机制</title>
    <link href="https://niuxiaocong.github.io/2021/09/06/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://niuxiaocong.github.io/2021/09/06/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2021-09-06T05:27:04.000Z</published>
    <updated>2021-09-06T05:27:06.855Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux基本命令</title>
    <link href="https://niuxiaocong.github.io/2021/09/06/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>https://niuxiaocong.github.io/2021/09/06/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</id>
    <published>2021-09-06T05:26:03.000Z</published>
    <updated>2021-09-06T05:26:04.030Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
