<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>牛小聪</title>
  
  
  <link href="https://niuxiaocong.github.io/atom.xml" rel="self"/>
  
  <link href="https://niuxiaocong.github.io/"/>
  <updated>2021-08-26T10:29:22.761Z</updated>
  <id>https://niuxiaocong.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mybatis笔记</title>
    <link href="https://niuxiaocong.github.io/2021/08/26/mybatis%E7%AC%94%E8%AE%B0/"/>
    <id>https://niuxiaocong.github.io/2021/08/26/mybatis%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-26T01:29:59.000Z</published>
    <updated>2021-08-26T10:29:22.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mybatis快速开始"><a href="#Mybatis快速开始" class="headerlink" title="Mybatis快速开始"></a>Mybatis快速开始</h1><ul><li><p>1、创建maven工程</p></li><li><p>2、导入相应的pom文件</p><pre><code class="xml">   &lt;dependencies&gt;       &lt;!--mybatis--&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.mybatis&lt;/groupId&gt;           &lt;artifactId&gt;mybatis&lt;/artifactId&gt;           &lt;version&gt;3.4.1&lt;/version&gt;       &lt;/dependency&gt;       &lt;!--mysql 连接--&gt;       &lt;dependency&gt;           &lt;groupId&gt;mysql&lt;/groupId&gt;           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;       &lt;/dependency&gt;        &lt;!--lombok 插件，可有可无--&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;           &lt;artifactId&gt;lombok&lt;/artifactId&gt;       &lt;/dependency&gt;&lt;dependency&gt;       &lt;groupId&gt;junit&lt;/groupId&gt;       &lt;artifactId&gt;junit&lt;/artifactId&gt;   &lt;/dependency&gt;   &lt;/dependencies&gt;</code></pre></li><li><p>3、创建mybatis的配置文件</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;!--    引入外部配置文件的两个参数    url=&quot;&quot;    这个可以引用磁盘路径下的配置文件    resource=&quot;&quot; 这个只能引用类路径下的配置文件     --&gt;    &lt;properties resource=&quot;dbconfig.properties&quot;&gt;&lt;/properties&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driverClass&#125;&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.jdbcUrl&#125;&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;!--resource:表示从类路径下找资源  --&gt;        &lt;mapper resource=&quot;EmployeeDao.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p>引用的外部文件内容</p><pre><code class="properties">jdbc.username=rootjdbc.password=rootjdbc.jdbcUrl=jdbc:mysql://localhost:3306/mybatis01?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=truejdbc.driverClass=com.mysql.cj.jdbc.Driver</code></pre></li><li><p>4、创建JavaBean</p><pre><code class="java">//get set 有参 无参 略public class Employee &#123;    private Integer id;    private String empname;    private String email;    private Integer gender;&#125;</code></pre></li><li><p>5、创建接口</p><pre><code class="java">public interface EmployeeDao &#123;    public Employee getEmpById(Integer id);&#125;</code></pre></li><li><p>6、创建实体类的映射文件</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!--    namespace:名称空间，写接口的全类名。告诉mybatis这个配置文件是哪一个接口实现  --&gt;&lt;mapper namespace=&quot;com.niuxiaoniu.dao.EmployeeDao&quot;&gt;    &lt;!--        id=&quot;&quot; 这里的id对应的是方法名        resultType=&quot;&quot; 对应的是返回值类型(查询操作必须指定)        #&#123;id&#125;：代表取出传递过来的某个参数值     --&gt;    &lt;select id=&quot;getEmpById&quot; resultType=&quot;com.niuxiaoniu.bean.Employee&quot;&gt;      select * from t_employee where id=#&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre></li><li><p>7、创建测试方法</p><pre><code class="java">    @Test    public void mybatisTest() throws IOException &#123;        //1.根据全局配置文件创建出一个SqlSessionFactory        //SqlSessionFactory：是SqlSession工厂，负责创建SqlSession对象        //SqlSession：sql会话（代表和数据库的一次会话）        String resource = &quot;mybatis_conf.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        //2.获取和数据库的一次会话：getConnection();        SqlSession openSession = sqlSessionFactory.openSession();        //3.使用SqlSession操作数据库        EmployeeDao mapper = openSession.getMapper(EmployeeDao.class);        Employee emp = mapper.getEmpById(1);        System.out.println(emp);    &#125;</code></pre><p>注意：在Idea中默认的源码文件目录是resources文件夹</p></li></ul><h1 id="Mybatis的CRUD"><a href="#Mybatis的CRUD" class="headerlink" title="Mybatis的CRUD"></a>Mybatis的CRUD</h1><ul><li><p>1~4步骤略</p></li><li><p>5、指定接口</p><pre><code class="java">public interface EmployeeDao &#123;    public Employee getEmpById(Integer id);    public boolean delEmpById(Integer id);    public boolean insertEmp(Employee employee);    public boolean updEmp(Employee employee);&#125;</code></pre></li><li><p>6、创建实体类的映射文件</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!--    namespace:名称空间，写接口的全类名。告诉mybatis这个配置文件是哪一个接口实现  --&gt;&lt;mapper namespace=&quot;com.niuxiaoniu.dao.EmployeeDao&quot;&gt;    &lt;!--        id=&quot;&quot; 这里的id对应的是方法名        resultType=&quot;&quot; 对应的是返回值类型(查询操作必须指定)        #&#123;id&#125;：代表取出传递过来的某个参数值     --&gt;    &lt;select id=&quot;getEmpById&quot; resultType=&quot;com.niuxiaoniu.bean.Employee&quot;&gt;      select * from t_employee where id=#&#123;id&#125;    &lt;/select&gt;    &lt;delete id=&quot;delEmpById&quot;&gt;        delete from t_employee where id=#&#123;id&#125;    &lt;/delete&gt;    &lt;update id=&quot;updEmp&quot;&gt;        update t_employee set empname=#&#123;empname&#125;,gender=#&#123;gender&#125;,email=#&#123;email&#125; where id = #&#123;id&#125;    &lt;/update&gt;    &lt;insert id=&quot;insertEmp&quot;&gt;        insert into t_employee(empname,gender,email) values(#&#123;empname&#125;,#&#123;gender&#125;,#&#123;email&#125;)    &lt;/insert&gt;&lt;/mapper&gt;</code></pre></li><li><p>7、测试方法略</p></li></ul><h1 id="Mybatis全局配置文件"><a href="#Mybatis全局配置文件" class="headerlink" title="Mybatis全局配置文件"></a>Mybatis全局配置文件</h1><ul><li><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties">properties（属性）</a></p><p>通常用来引用外部的配置文件</p><pre><code class="xml">&lt;!--         引入外部配置文件的两个参数        url=&quot;&quot;    这个可以引用磁盘路径下的配置文件        resource=&quot;&quot; 这个只能引用类路径下的配置文件     --&gt;    &lt;properties resource=&quot;外部文件位置的路径&quot;&gt;&lt;/properties&gt;</code></pre></li><li><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">settings（设置）</a></p><pre><code class="xml">&lt;!--具体属性的美容请参考官方文档--&gt;&lt;settings&gt;    &lt;setting name=&quot;属性名&quot; value=&quot;属性值&quot;/&gt;&lt;/settings&gt;</code></pre></li><li><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">typeAliases（类型别名）</a></p><pre><code class="xml">&lt;typeAliases&gt;        &lt;!-- 别名默认就是类名 alias=&quot;emp&quot; 指定新的别名 不区分大小写--&gt;        &lt;!-- &lt;typeAlias type=&quot;com.niu.bean.Employee&quot; alias=&quot;emp&quot;/&gt; --&gt;        &lt;!-- 批量起别名  指定包名，类名默认就是这个包下的类名--&gt;        &lt;package name=&quot;com.niu.bean&quot;/&gt;&lt;/typeAliases&gt;</code></pre></li><li><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></p></li><li><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></p></li><li><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a></p></li><li><p>environments（环境配置）</p><ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul><pre><code class="xml"> &lt;!--    environment标签：配置一个具体的环境，都需要一个事务管理器和一个数据源 transactionManager dataSource--&gt;&lt;!--    default=&quot;development&quot; 默认的情况下使用那个环境--&gt;&lt;environments default=&quot;development&quot;&gt;    &lt;environment id=&quot;development&quot;&gt;      &lt;transactionManager type=&quot;JDBC&quot;/&gt;      &lt;!-- 配置数据源 --&gt;      &lt;dataSource type=&quot;POOLED&quot;&gt;        &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driverClass&#125;&quot;/&gt;        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.jdbcUrl&#125;&quot;/&gt;        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;      &lt;/dataSource&gt;    &lt;/environment&gt;  &lt;/environments&gt;</code></pre></li><li><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider">databaseIdProvider（数据库厂商标识）</a></p></li><li><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers">mappers（映射器）</a></p><pre><code class="xml">&lt;mappers&gt;         &lt;!--             class=&quot;&quot;    :直接引用接口的全类名，可以将xml放在和dao接口同目录下面                resource=&quot;&quot;    :在类路径下找sql的映射文件            url=&quot;&quot;        :在磁盘路径上找sql的映射文件     --&gt;    &lt;!-- &lt;mapper resource=&quot;EmployeeDao.xml&quot;/&gt; --&gt;    &lt;!-- &lt;mapper class=&quot;com.niu.dao.EmployeeDaoAnnotation&quot;/&gt; --&gt;        &lt;!--        批量注册        name=&quot;&quot;dao所在的包名     --&gt;     &lt;package name=&quot;com.niu.dao&quot;/&gt;                                                              &lt;/mappers&gt;</code></pre></li></ul><h1 id="Mybatis-SQL映射文件"><a href="#Mybatis-SQL映射文件" class="headerlink" title="Mybatis SQL映射文件"></a>Mybatis SQL映射文件</h1><pre><code>SQL映射标签cache – 该命名空间的缓存配置。cache-ref – 引用其它命名空间的缓存配置。resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。parameterMap – 老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。sql – 可被其它语句引用的可重用语句块。insert – 映射插入语句。update – 映射更新语句。delete – 映射删除语句。select – 映射查询语句。</code></pre><h2 id="Insert，Update，Delete元素的相关属性"><a href="#Insert，Update，Delete元素的相关属性" class="headerlink" title="Insert，Update，Delete元素的相关属性"></a>Insert，Update，Delete元素的相关属性</h2><p><img src="/2021/08/26/mybatis%E7%AC%94%E8%AE%B0/image-20210826173915556.png" alt="image-20210826173915556"></p><h2 id="Select-元素的相关属性"><a href="#Select-元素的相关属性" class="headerlink" title="Select 元素的相关属性"></a>Select 元素的相关属性</h2><p><img src="/2021/08/26/mybatis%E7%AC%94%E8%AE%B0/image-20210826174050750.png" alt="image-20210826174050750"></p><h2 id="获取自增主键"><a href="#获取自增主键" class="headerlink" title="获取自增主键"></a>获取自增主键</h2><pre><code class="xml">    &lt;!--        useGeneratedKeys=&quot;true&quot; 用来动态的获取Insert update的列值        keyProperty=&quot;id&quot;  指定对象唯一识别的属性    --&gt;    &lt;insert id=&quot;insertEmp&quot;  useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;        insert into t_employee(empname,gender,email) values(#&#123;empname&#125;,#&#123;gender&#125;,#&#123;email&#125;)    &lt;/insert&gt;</code></pre><h2 id="参数的获取"><a href="#参数的获取" class="headerlink" title="参数的获取"></a>参数的获取</h2><ul><li><p>单个参数</p><ul><li><p>基本数据类型</p><p>取值：#{随便写}</p></li><li><p>JavaBean对象</p></li></ul></li><li><p>多个参数</p><p>传递多个参数#{参数名} 会失效</p><p>可以使用 0，1或者param1，param2 …. 等等来指带</p><p>原因：出现这种现象的原因是，只要是传递了多个参数Mybatis会自动的把他封装在一个map中，封装时候使用的key就是参数的索引和参数的第几个表示</p></li></ul><p>​        自己指定key 使用@Param参数自己指定key</p><p>​        <img src="/2021/08/26/mybatis%E7%AC%94%E8%AE%B0/image-20210826181959721.png" alt="image-20210826181959721"></p><p><img src="/2021/08/26/mybatis%E7%AC%94%E8%AE%B0/image-20210826182018751.png" alt="image-20210826182018751"></p><ul><li><p>传入Map</p><p>将多个参数使用map集合封装起来</p><p>取值方式：#{key}</p></li><li><p>传入了JavaBean</p><p>取值方式：#{bean 的属性名}</p></li></ul><h2 id="和-取值的区别"><a href="#和-取值的区别" class="headerlink" title="#{ } 和  ${ } 取值的区别"></a>#{ } 和  ${ } 取值的区别</h2><h2 id="得瑟得瑟"><a href="#得瑟得瑟" class="headerlink" title="得瑟得瑟"></a>得瑟得瑟</h2><h1 id="SQL动态标签"><a href="#SQL动态标签" class="headerlink" title="SQL动态标签"></a>SQL动态标签</h1><h1 id><a href="#" class="headerlink" title></a></h1><h1 id="Mybatis缓存机制"><a href="#Mybatis缓存机制" class="headerlink" title="Mybatis缓存机制"></a>Mybatis缓存机制</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="后台框架" scheme="https://niuxiaocong.github.io/categories/%E5%90%8E%E5%8F%B0%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="mybatis" scheme="https://niuxiaocong.github.io/tags/mybatis/"/>
    
    <category term="后台框架" scheme="https://niuxiaocong.github.io/tags/%E5%90%8E%E5%8F%B0%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>mybatis_plus笔记</title>
    <link href="https://niuxiaocong.github.io/2021/08/26/mybatis-plus%E7%AC%94%E8%AE%B0/"/>
    <id>https://niuxiaocong.github.io/2021/08/26/mybatis-plus%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-26T01:29:42.000Z</published>
    <updated>2021-08-26T03:12:41.733Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>h</p><p>哈哈哈</p><h1 id="Mybatis-plus快速开始"><a href="#Mybatis-plus快速开始" class="headerlink" title="Mybatis_plus快速开始"></a>Mybatis_plus快速开始</h1><p>测试数据</p><pre><code class="sql">#表DROP TABLE IF EXISTS user;CREATE TABLE user(    id BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,    name VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;姓名&#39;,    age INT(11) NULL DEFAULT NULL COMMENT &#39;年龄&#39;,    email VARCHAR(50) NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,    PRIMARY KEY (id));#数据DELETE FROM user;INSERT INTO user (id, name, age, email) VALUES(1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;),(2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;),(3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;),(4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;),(5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="后端框架" scheme="https://niuxiaocong.github.io/categories/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="mybatis_plus" scheme="https://niuxiaocong.github.io/tags/mybatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>springboot2笔记</title>
    <link href="https://niuxiaocong.github.io/2021/08/26/springboot2%E7%AC%94%E8%AE%B0/"/>
    <id>https://niuxiaocong.github.io/2021/08/26/springboot2%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-25T23:04:35.000Z</published>
    <updated>2021-08-25T23:04:35.529Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git版本控制工具</title>
    <link href="https://niuxiaocong.github.io/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    <id>https://niuxiaocong.github.io/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</id>
    <published>2021-08-24T22:31:35.000Z</published>
    <updated>2021-08-26T01:21:11.208Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h1><p>傻瓜式安装下一步下一步即可，略</p><h1 id="Git的结构"><a href="#Git的结构" class="headerlink" title="Git的结构"></a>Git的结构</h1><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825064437676.png" alt="image-20210825064437676"></p><h1 id="Git初始化本地仓库"><a href="#Git初始化本地仓库" class="headerlink" title="Git初始化本地仓库"></a>Git初始化本地仓库</h1><p>1、创建一个文件夹</p><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825065137297.png" alt="image-20210825065137297"></p><p>2、执行命令</p><p>初始化成功以后会有一个，git的隐藏文件夹</p><pre><code class="bash">git init #初始化一个本地库</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825065300954.png" alt="image-20210825065300954"></p><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825065325324.png" alt="image-20210825065325324"></p><h1 id="Git-提交到缓存区和提交到本地库命令"><a href="#Git-提交到缓存区和提交到本地库命令" class="headerlink" title="Git 提交到缓存区和提交到本地库命令"></a>Git 提交到缓存区和提交到本地库命令</h1><p>1、提交到暂存区</p><pre><code class="bash">git add 要提交的文件</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825070317131.png" alt="image-20210825070317131"></p><p>2、提交到本地库操作</p><pre><code class="bash">git commit -m &quot;信息描述&quot;</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825070438519.png" alt="image-20210825070438519"></p><h1 id="Git查看提交状态命令"><a href="#Git查看提交状态命令" class="headerlink" title="Git查看提交状态命令"></a>Git查看提交状态命令</h1><p>查看提交的状态</p><pre><code class="bash">git status</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825071020927.png" alt="image-20210825071020927"></p><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825071128642.png" alt="image-20210825071128642"></p><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825071349987.png" alt="image-20210825071349987"></p><h1 id="Git查看日志操作命令"><a href="#Git查看日志操作命令" class="headerlink" title="Git查看日志操作命令"></a>Git查看日志操作命令</h1><p>查看提交日志，方式一</p><p>展示提交记录的详细信息</p><pre><code class="bash">git log</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825083659082.png" alt="image-20210825083659082"></p><p>查看提交日志，方式二</p><p>提交的信息记录在一行显示</p><pre><code class="bash">git log --pretty=oneline</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825084158508.png" alt="image-20210825084158508"></p><p>查看提交日志，方式三</p><p>更加简洁的显示方式</p><pre><code class="bash">git log --oneline</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825084409035.png" alt="image-20210825084409035"></p><p>查看提交日志，方式四</p><pre><code class="bash">git reflog</code></pre><p>HEAD@{数字}，指针回到当前这个历史版本需要走多少步</p><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825084632054.png" alt="image-20210825084632054"></p><h1 id="Git版本回退命令"><a href="#Git版本回退命令" class="headerlink" title="Git版本回退命令"></a>Git版本回退命令</h1><p>回退到指定版本</p><pre><code class="bash">git reset --hard ed4b7bf</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825085725122.png" alt="image-20210825085725122"></p><ul><li><p>相关参数</p><p>–hard 参数，使用这个参数的时候，本地库的指针移动的同时，重置暂存区和工作区</p><p>–mixed参数，使用这个参数的时候，本地库的指针移动的同时，重置暂存区，工作区不变</p><p>–soft参数，使用这个参数的时候，本地库的指针移动的同时，暂存区和工作区都不变</p></li></ul><h1 id="Git删除操作"><a href="#Git删除操作" class="headerlink" title="Git删除操作"></a>Git删除操作</h1><p>删除工作区的文件</p><p>这里仅仅是删除工作区里面的内容，但是暂存区和本地库的内容还会存在</p><pre><code class="bash">rm 文件名</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825091518625.png" alt="image-20210825091518625"></p><p>删除的记录依旧会存在，如果想要找回文件，那么请回退到相应的版本上即可</p><h1 id="Git文件对比命令"><a href="#Git文件对比命令" class="headerlink" title="Git文件对比命令"></a>Git文件对比命令</h1><p>比对这个文件在工作区和暂存区是否相同</p><pre><code class="bash">git diff 文件名</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825092655193.png" alt="image-20210825092655193"></p><p>比对工作区和暂存区所有的文件</p><pre><code class="bash">git diff</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825092943225.png" alt="image-20210825092943225"></p><p>比对暂存区和本地仓库</p><pre><code class="bash">git diff [历史版本] [文件名]</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825093843730.png" alt="image-20210825093843730"></p><h1 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h1><ul><li><p>查看分支</p><pre><code class="bash">git branch -v</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825095025999.png" alt="image-20210825095025999"></p></li><li><p>创建分支</p><pre><code class="bash">git branch branch01</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825095142236.png" alt="image-20210825095142236"></p></li><li><p>切换分支</p><pre><code class="bash">git checkout branch01</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825095317049.png" alt="image-20210825095317049"></p></li><li><p>分支合并</p><p>首先要切换在master分支上</p><p>此时这两个分支的版本号不相同这个时候去合并会产生分支冲突的问题</p><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825101434375.png" alt="image-20210825101434375"></p><p>合并</p><pre><code class="bash">git merge branch01</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825102122590.png" alt="image-20210825102122590"></p><p>出现冲突：何时会出现冲突问题？在同一个文件的同一个位置修改</p><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825102445453.png" alt="image-20210825102445453"></p><p>冲突解决：留下想要的内容，然后在提交</p><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210825103013519.png" alt="image-20210825103013519"></p></li></ul><h1 id="Git将本地库内容提交到远程库"><a href="#Git将本地库内容提交到远程库" class="headerlink" title="Git将本地库内容提交到远程库"></a>Git将本地库内容提交到远程库</h1><p>在GitHub 或者码云上创建一个自己的本地仓库，创建过程略</p><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210826071409170.png" alt="image-20210826071409170"></p><p>为远程库起别名</p><pre><code class="bash">git remote add origin https://gitee.com/againnyc/git-test-resp.git</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210826072020068.png" alt="image-20210826072020068"></p><p>推送操作</p><pre><code class="bash">git push origin master</code></pre><p><img src="/2021/08/25/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/image-20210826072322113.png" alt="image-20210826072322113"></p><h1 id="Git远程库的拉取操作"><a href="#Git远程库的拉取操作" class="headerlink" title="Git远程库的拉取操作"></a>Git远程库的拉取操作</h1><pre><code class="bash">git fetch origin master</code></pre><p>他只是会将远程库的内容 抓取到本地，但是工作区并不更新。</p><p>pull操作相当于fetch和merge操作的合并</p><h1 id="Git常用命令操作"><a href="#Git常用命令操作" class="headerlink" title="Git常用命令操作"></a>Git常用命令操作</h1><ol><li><p>设置签名</p><pre><code class="bash">git config --global user.name &quot;签名&quot;</code></pre></li><li><p>设置邮箱</p><pre><code class="bash">git config --global user.email &quot;邮箱名&quot;</code></pre></li><li><p>查git版本</p><pre><code class="bash">git version</code></pre></li><li><p>清屏操作</p><pre><code class="bash">git clear</code></pre></li><li><p>本地仓库初始化命令</p><pre><code class="bash">git init</code></pre></li><li><p>提交到缓存区</p><pre><code class="bash">git add 文件名</code></pre></li><li><p>提交到本地库</p><pre><code class="bash">git commit -m &quot;提交的信息描述&quot;</code></pre></li><li><p>查看提交状态的命令</p><pre><code class="bash">git status</code></pre></li><li><p>查看日志操作</p><pre><code class="bash">git log git log --pretty=onelinegit log --onelinegit reflog</code></pre></li><li><p>版本回退命令</p><pre><code class="bash">git reset --hard 要回退的版本索引号#参数 --hard  --mixed --soft</code></pre></li><li><p>删除工作区的命令</p><pre><code class="bash">rm 文件名</code></pre></li><li><p>文件对比命令</p><pre><code class="bash">git diff 文件名git diffgit diff [历史版本] [文件名]</code></pre></li><li><p>查看分支</p><pre><code class="bash">git branch -v</code></pre></li><li><p>创建分支</p><pre><code class="bash">git branch 新的分支名称</code></pre></li><li><p>切换分支</p><pre><code class="bash">git checkout 要切换的分支名</code></pre></li><li><p>合并分支</p><pre><code class="bash">git merge 要合并的分支</code></pre></li><li><p>为远程库起别名</p><pre><code class="bash">git remote add 别名 远程库地址</code></pre></li><li><p>推送操作</p><pre><code class="bash">git push -u 远程库地址 要推送的分支</code></pre></li><li><p>克隆操作</p><pre><code class="bash">git clone 远程库地址</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Git版本控制工具" scheme="https://niuxiaocong.github.io/categories/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Git" scheme="https://niuxiaocong.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>算法基础</title>
    <link href="https://niuxiaocong.github.io/2021/08/23/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>https://niuxiaocong.github.io/2021/08/23/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2021-08-23T09:13:20.000Z</published>
    <updated>2021-08-24T15:10:33.981Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>异或操作规律</p><p>性质1</p><p>0^N = N，N^N = 0</p><p>性质2</p><p>异或运算满足交换律和结合律</p><p>a^b = b^a </p><p>a^b^c = a^(b^c)</p><h3 id="题目：在一个数组中，已知只有一个数出现了奇数次，其他的数出现了偶数次，请找出这个出现奇数次的数"><a href="#题目：在一个数组中，已知只有一个数出现了奇数次，其他的数出现了偶数次，请找出这个出现奇数次的数" class="headerlink" title="题目：在一个数组中，已知只有一个数出现了奇数次，其他的数出现了偶数次，请找出这个出现奇数次的数"></a>题目：在一个数组中，已知只有一个数出现了奇数次，其他的数出现了偶数次，请找出这个出现奇数次的数</h3><h3>那么有两种出现了奇数次，剩余的数出现了偶数次，应该怎么找</h3><pre><code class="java">package com.java1;public class QuestOneDemo &#123;        public static void main(String[] args) &#123;        int[] arr = &#123;1,1,2,2,2,2,3,3,3,4&#125;;        //printOddTiemsNumsOne(arr);        printOddTiemsNumsTwo(arr);    &#125;    //第一個問題    public static void printOddTiemsNumsOne(int[] arr) &#123;        int eor = 0;        for(int cur : arr) &#123;            eor ^= cur;        &#125;        System.out.println(eor);    &#125;    // 第二个问题    public static void printOddTiemsNumsTwo(int[] arr) &#123;        int eor = 0;        for(int cur : arr) &#123;            eor ^= cur;        &#125;        //eor = a^b        //eor != 0        //eor 位置上必然有一個是1        int rightOne = eor &amp; (~eor + 1);                int onlyOne = 0; //eor&#39;                for(int cur : arr) &#123;            if((cur &amp; rightOne) == 1) &#123;                onlyOne ^= cur;            &#125;        &#125;        System.out.println(onlyOne + &quot; &quot; + (eor ^ onlyOne));            &#125;&#125;</code></pre><h3 id="题目：二分查找法"><a href="#题目：二分查找法" class="headerlink" title="题目：二分查找法"></a>题目：二分查找法</h3><ul><li>在一个有序的数组中，寻找某个数是否存在</li></ul><p>两种思路递归和非递归</p><h4 id="非递归方式"><a href="#非递归方式" class="headerlink" title="非递归方式"></a>非递归方式</h4><p>代码实现</p><pre><code class="java">    //非递归的方式    public static boolean doubleBranch(int[] arr,int target) &#123;            if(arr == null || arr.length == 0) &#123;            return false;        &#125;        int right = arr.length-1;    //右侧的指针        int left = 0;               //左侧指针        int mid = 0;               //中间指针        boolean isFind = false;        //是否找到target目标元素                while(right&gt;=left) &#123;        //左侧指针如果大于右侧指针则结束循环            mid = (right + left) / 2;    //找到中间元素的坐标            if(arr[mid] == target) &#123;    //找到 将isFind 置为true                isFind = true;                break;            &#125;else if(arr[mid] &gt; target) &#123;    //证明目标元素在左侧                right = mid -1;            &#125;else &#123;                           //证明目标元素在这个数组中间位置的右侧                left = mid + 1;            &#125;        &#125;        return isFind;    &#125;</code></pre><h4 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h4><p>代码实现</p><pre><code class="java">    //递归方式实现    public static boolean doubleBranchDiGui(int[] arr,int left,int right,int target) &#123;                int L = left;                        int R = right;        int Mid = (R - L)/2 + L;        boolean isFind = false;                        if(arr[Mid] &gt; target) &#123;            return doubleBranchDiGui(arr, L, Mid-1,target);        &#125;else if(arr[Mid] &lt; target) &#123;            return doubleBranchDiGui(arr, Mid+1,R,target);        &#125;else if(arr[Mid] == target)&#123;            return true;        &#125;        return false;    &#125;</code></pre><ul><li>在一个有序的数组中，找&gt;=某个数最左侧的位置</li></ul><ul><li>局部最小值问题</li></ul><p>master公式</p><p>T(N) = a*T(N/b) + O(n^d)</p><p>​    T(N)：总问题的数据规模</p><p>​    a：调用次数</p><p>​    T(N/b)：子问题的规模</p><p>log(b,a) &gt; d -&gt; 复杂度为O(N^log(b,a))</p><p>log(b,a) = d -&gt; 复杂度为O(N^d * logN)</p><p>log(b,a) &lt; d -&gt; 复杂度为O(N^d)</p><h3 id="题目：小和问题"><a href="#题目：小和问题" class="headerlink" title="题目：小和问题"></a>题目：小和问题</h3><p>在一个数组中，每一个数左边比当前数小的累加起来来，叫做这个数组的小和，求一个数组的小和。</p><p>例如：[1，3，4，2，5] 1左边比1小的数，没有、3左边比3小的数 1、4左边比4小的数1，3、2左边比2小的数1、5左边比5小的数1，2，4，2 。所以小和累加为1+1+3+1+1+3+4+2 = 16</p><h3 id="题目：荷兰国旗问题"><a href="#题目：荷兰国旗问题" class="headerlink" title="题目：荷兰国旗问题"></a>题目：荷兰国旗问题</h3><p>代码实现</p><pre><code class="java">package com.quick;import java.util.Arrays;public class PartitionDemo &#123;        public static void main(String[] args) &#123;        int[] arr = &#123;3,5,6,7,4,3,5,8&#125;;        //partition1(arr,5);        partition2(arr, 5);        System.out.println(Arrays.toString(arr));    &#125;        //partition 过程    /**     * 将一组数分成两个部分，小于指定数的放在一侧     *     情况1、 i位置的数小于等于目标数据，i位置和小于等于的下一个数交换，小于等于区域的向右阔 i++     *  情况2、如果i位置上的索引大于target、目标数据 直接 i++     */    public static void partition1(int[] arr,int target) &#123;        if(arr == null || arr.length&lt;2) &#123;            return ;        &#125;                int left = -1;   //小于等于的区域                for(int i=0;i&lt;arr.length;i++) &#123;            if(arr[i]&lt;=target) &#123;                left++;                swap(arr, i,left);             &#125;        &#125;    &#125;        //partition 过程    /**     *情况1：如果 i 位置上的数小于目标数据target 让i位置上的数和小于区域的下一个数做交换，小于区域向右边阔，i跳下一个     *情况2：如果 i 位置上的数等于目标数据target i跳下一个     *情况3：如果 i 位置上的数大于目标数据target 让i和 大于区域前一个做交换，大于区域位置想做阔，i原地不动     */    public static void partition2(int[] arr,int target) &#123;        int len = arr.length-1;  //数组的长度        int index = 0;            //数组的下标        int left = -1;            //小于区域的数据        int right = arr.length; //大于区域的数据        while(right!=index) &#123;                    if(arr[index]&lt;target) &#123;                    left++;                swap(arr, index, left);                index++;            &#125;else if(arr[index]&gt;target) &#123;                right--;                swap(arr, index, right);            &#125;else &#123;                            index++;            &#125;        &#125;    &#125;        //交换函数    public static void swap(int[] arr , int i , int j) &#123;        int temp = arr[i];        arr[i] = arr[j];        arr[j] = temp;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="https://niuxiaocong.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://niuxiaocong.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://niuxiaocong.github.io/2021/08/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://niuxiaocong.github.io/2021/08/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2021-08-23T03:00:20.000Z</published>
    <updated>2021-08-24T15:22:07.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用的排序算法"><a href="#常用的排序算法" class="headerlink" title="常用的排序算法"></a>常用的排序算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="/2021/08/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/image-20210823115539098.png" alt="image-20210823115539098"></p><p>代码实现</p><pre><code class="java">package sort;import java.util.Arrays;public class BubbleSort &#123;    public static void main(String[] args) &#123;        int[] arr= &#123;101,34,119,1&#125;;                int temp = 0;                for(int i=0;i&lt;arr.length-1;i++) &#123;            for(int j=0;j&lt;arr.length-1-i;j++) &#123;                if(arr[j]&gt;arr[j+1]) &#123;                    temp = arr[j];                    arr[j] = arr[j+1];                    arr[j+1] = temp;                &#125;            &#125;        &#125;        System.out.println(Arrays.toString(arr));    &#125;&#125;</code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="/2021/08/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/image-20210823115556329.png" alt="image-20210823115556329"></p><p>代码实现</p><pre><code class="java">package sort;import java.util.Arrays;public class SelectSort &#123;    public static void main(String[] args) &#123;        int[] arr= &#123;101,34,119,1&#125;;                for(int i=0;i&lt;arr.length-1;i++) &#123;                        int minIndex = i;            int minSum=arr[i];                        for(int j=1+1;j&lt;arr.length;j++) &#123;                if(minSum&gt;arr[j]) &#123;                    minSum = arr[j];                    minIndex = j;                &#125;            &#125;                    if(minIndex!=i) &#123;                arr[minIndex] = arr[i];                arr[i] = minSum;                            &#125;        &#125;            System.out.println(Arrays.toString(arr));    &#125;&#125;</code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="/2021/08/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/image-20210823184037483.png" alt="image-20210823184037483"></p><p>代码实现</p><pre><code class="java">package sort3;import java.util.Arrays;public class InsertSortDemo &#123;    public static void main(String[] args) &#123;        int[] arr = &#123;9,2,3,8&#125;;        insertSort(arr);        System.out.println(Arrays.toString(arr));    &#125;    //插入方法    public static void insertSort(int[] arr) &#123;        if(arr == null || arr.length&lt;2) &#123;            return ;        &#125;            for(int i=1;i&lt;arr.length;i++) &#123;            for(int j = i-1;j&gt;=0 &amp;&amp; arr[j]&gt;arr[j+1];j--) &#123;                swap(arr, i, j);            &#125;        &#125;    &#125;    //交换方法    public static void swap(int[] arr,int i,int j) &#123;        int temp = arr[i];        arr[i] = arr[j];        arr[j] = temp;    &#125;&#125;</code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><img src="/2021/08/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/image-20210823115608580.png" alt="image-20210823115608580"></p><pre><code class="java">package sort;import java.util.Arrays;public class MergeSortDemo &#123;    //主方法    public static void main(String[] args) &#123;        //int[] arr = &#123;1,3,5,2,4,6&#125;;        int[] arr = &#123;5,4,7,8,2,3&#125;;        process(arr,0,arr.length-1);        //process(arr, 0, arr.length-1);        //merger(arr,0,(arr.length-1)/2,arr.length-1);    &#125;            //递归方法    public static void process(int[] arr,int L,int R) &#123;        if(L == R) &#123;            return ;        &#125;        int mid = L+((R-L)/2);        //int mid = (L+R)/2;        process(arr,L,mid);        process(arr,mid+1,R);        merge(arr,L,mid,R);            &#125;        //合并方法    public static void merge(int arr[],int L,int M,int R) &#123;                int[] help = new int[R-L+1];                int p1 = L;        int p2 = M+1;        int i=0;                while(p1&lt;=M&amp;&amp;p2&lt;=R) &#123;            if(arr[p1]&lt;arr[p2]) &#123;                help[i] = arr[p1];                i++;                p1++;            &#125;else &#123;                help[i] = arr[p2];                i++;                p2++;            &#125;        &#125;                while(p1&lt;=M) &#123;            help[i++] = arr[p1++];        &#125;                        while(p2&lt;=R) &#123;            help[i++] = arr[p2++];        &#125;                        for (i = 0; i &lt; help.length; i++) &#123;            arr[L+i] = help[i];        &#125;                System.out.println(&quot;归并：&quot;+Arrays.toString(help));        &#125;&#125;</code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>排序算法中时间复杂度和空间复杂度的对比</p><p><img src="/2021/08/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/image-20210823171038054.png" alt="image-20210823171038054"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="https://niuxiaocong.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://niuxiaocong.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="排序算法" scheme="https://niuxiaocong.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="https://niuxiaocong.github.io/2021/08/23/%E6%A0%88/"/>
    <id>https://niuxiaocong.github.io/2021/08/23/%E6%A0%88/</id>
    <published>2021-08-23T02:34:59.000Z</published>
    <updated>2021-08-24T15:10:23.408Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h1><p><img src="/2021/08/23/%E6%A0%88/image-20210823105728346.png" alt="image-20210823105728346"></p><h2 id="使用数组模拟栈结构代码实现"><a href="#使用数组模拟栈结构代码实现" class="headerlink" title="使用数组模拟栈结构代码实现"></a>使用数组模拟栈结构代码实现</h2><pre><code class="java">package com.java.stack;import java.util.Scanner;/** * 使用数组来模拟栈结构 */public class ArrayStackDemo &#123;    public static void main(String[] args) &#123;        StackArr stack = new StackArr(4);        boolean loop = true;        Scanner scan = new Scanner(System.in);        char key = &#39; &#39;;            while(loop) &#123;            System.out.println(&quot;e(exit) 退出&quot;);            System.out.println(&quot;a(add) 入栈操作&quot;);            System.out.println(&quot;r(remove) 出栈操作&quot;);            System.out.println(&quot;t(top) 查看当前栈顶的元素&quot;);            key = scan.next().charAt(0);                        switch(key) &#123;            case &#39;e&#39;:                System.out.println(&quot;**********退出程序**********&quot;);                loop = false;                break;            case &#39;a&#39;:                System.out.println(&quot;**********请输入要入栈的数据**********&quot;);                int val = scan.nextInt();                stack.push(val);                break;            case &#39;r&#39;:                System.out.println(&quot;**********出栈一个数据**********&quot;);                int pop = stack.pop();                System.out.println(&quot;出栈的元素是：&quot;+pop);                break;            case &#39;t&#39;:                System.out.println(&quot;**********查看当前的栈顶元素**********&quot;);                int top = stack.top();                System.out.println(&quot;当前栈顶的元素是：&quot;+top);                break;            default:                System.out.println(&quot;没有这条指令，重新输入&quot;);                break;                    &#125;        &#125;    &#125;&#125;//栈的一个结构class StackArr&#123;        int[] arr = null;   //使用数组模拟栈结构    int maxSize;        //栈的最大容量    int top;            //栈顶指针        public StackArr(int maxSize) &#123;        this.maxSize = maxSize;        arr = new int[maxSize];        top = -1;    &#125;    //空栈    public boolean isEmpty() &#123;        return top==-1?true:false;    &#125;    //满栈    public boolean isFull() &#123;        return top==maxSize-1?true:false;    &#125;    //入栈操作    public void push(int n) &#123;        if(isFull()) &#123;            System.out.println(&quot;满栈，无法加入~~&quot;);            return;        &#125;        arr[++top] = n;     &#125;    //出栈操作    public int pop() &#123;            if(isEmpty()) &#123;            throw new RuntimeException(&quot;空栈，无法进行pop操作&quot;);        &#125;        int value = arr[top--];        return value;    &#125;    //查看栈顶元素    public int top() &#123;        if(isEmpty()) &#123;            throw new RuntimeException(&quot;空栈，栈顶为空&quot;);        &#125;        return arr[top];    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="https://niuxiaocong.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://niuxiaocong.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署到Github</title>
    <link href="https://niuxiaocong.github.io/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/"/>
    <id>https://niuxiaocong.github.io/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/</id>
    <published>2021-08-23T00:46:53.000Z</published>
    <updated>2021-08-24T15:09:17.151Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用Hexo搭建一个网站"><a href="#使用Hexo搭建一个网站" class="headerlink" title="使用Hexo搭建一个网站"></a>使用Hexo搭建一个网站</h1><pre><code>需要环境Node.js  14.17.5 (建议在12版本以上都可以)</code></pre><p>Node.js 安装略</p><p>Git 安装略</p><h2 id="安装Hexo的脚手架"><a href="#安装Hexo的脚手架" class="headerlink" title="安装Hexo的脚手架"></a>安装Hexo的脚手架</h2><pre><code>npm install -g hexo-cli</code></pre><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210823090843614.png" alt="image-20210823090843614"></p><h2 id="执行初始化命令"><a href="#执行初始化命令" class="headerlink" title="执行初始化命令"></a>执行初始化命令</h2><pre><code>hexo init他会从github上下载模板，速度会有点慢，也可能会下载失败，多下载几次既可以了</code></pre><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822181109062.png" alt="image-20210822181109062"></p><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><pre><code>hexo g 或者hexo generate</code></pre><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822181408143.png" alt="image-20210822181408143"></p><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre><code>hexo s</code></pre><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822181445442.png" alt="image-20210822181445442"></p><p>默认的端口是4000</p><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822181538026.png" alt="image-20210822181538026"></p><p>一个简单的网站就搭建完毕了。接下来是发布到GitHub上</p><h1 id="发布到GitHub"><a href="#发布到GitHub" class="headerlink" title="发布到GitHub"></a>发布到GitHub</h1><p>创建gitHub账户略</p><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822182336588.png" alt="image-20210822182336588"></p><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822182513150.png" alt="image-20210822182513150"></p><h2 id="配置-config-yml中有关deploy的部分"><a href="#配置-config-yml中有关deploy的部分" class="headerlink" title="配置_config.yml中有关deploy的部分"></a>配置<code>_config.yml</code>中有关deploy的部分</h2><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822182905468.png" alt="image-20210822182905468"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在部署的时候一定要用git bash，会省去很多不必要的麻烦</p><pre><code>hexo d</code></pre><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822183235152.png" alt="image-20210822183235152"></p><p>出现这个不要慌，因为后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行<code>hexo d</code>的话一般会报上面的这个错误。</p><p>安装一个插件即可</p><pre><code>npm install hexo-deployer-git</code></pre><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822183444479.png" alt="image-20210822183444479"></p><p>提交到GitHub仓库</p><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822183850300.png" alt="image-20210822183850300"></p><p>部署命令</p><pre><code>hexo d或者hexo deploy</code></pre><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210822213357819.png" alt="image-20210822213357819"></p><p>总结：部署的步骤</p><p>hexo clean  清空一下生成的html</p><p>hexo generate 重新生成html</p><p>hexo deploy 部署</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre><code>hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本简写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><h2 id="找主题克隆到本地"><a href="#找主题克隆到本地" class="headerlink" title="找主题克隆到本地"></a>找主题克隆到本地</h2><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210823062446217.png" alt="image-20210823062446217"></p><p>进入Github以后将他Clone到本地，克隆到本地的themes文件夹下，然后重命名为上图左下角GitHub链接名Life，可能会受到网络的影响，一次克隆不下来，多克隆几次就好</p><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210823062703453.png" alt="image-20210823062703453"></p><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210823063451936.png" alt="image-20210823063451936"></p><h2 id="修改Hexo的配置"><a href="#修改Hexo的配置" class="headerlink" title="修改Hexo的配置"></a>修改Hexo的配置</h2><p>找到 _config.yml文件夹</p><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210823063752179.png" alt="image-20210823063752179"></p><h2 id="重新生成代码"><a href="#重新生成代码" class="headerlink" title="重新生成代码"></a>重新生成代码</h2><pre><code>hexo clean</code></pre><pre><code>hexo g</code></pre><pre><code>hexo s</code></pre><p> 重新跑起来以后出现如下这种情况，缺少hexo-renderer-swig这个依赖</p><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210823064814169.png" alt="image-20210823064814169"></p><p>使用以下命令解决</p><pre><code> npm i hexo-renderer-swig</code></pre><p>下载完成 以后重新 hexo clean 清除缓存 hexo g 重新生成 hexo s 重新启动，如此一来更换主题就完成了</p><p><img src="/2021/08/23/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/image-20210823065744360.png" alt="image-20210823065744360"></p><p>如果想要部署到GitHub 直接hexo d即可</p><h1 id="解决图片显示不了的问题"><a href="#解决图片显示不了的问题" class="headerlink" title="解决图片显示不了的问题"></a>解决图片显示不了的问题</h1><p>1.首先安装一下依赖</p><pre><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>2.然后把_config.yml中的post_asset_folder设为true，这个配置的意思是每次new post一个博客，会增加一个和博客同名的文件夹。</p><p>3.最后重新发布就行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://niuxiaocong.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Hexo" scheme="https://niuxiaocong.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
